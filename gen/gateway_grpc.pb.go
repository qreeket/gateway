// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: gateway.proto

package qreeket

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QreeketGatewayService_GetAnnouncements_FullMethodName               = "/qreeket.QreeketGatewayService/GetAnnouncements"
	QreeketGatewayService_GetAnnouncement_FullMethodName                = "/qreeket.QreeketGatewayService/GetAnnouncement"
	QreeketGatewayService_CreateAnnouncement_FullMethodName             = "/qreeket.QreeketGatewayService/CreateAnnouncement"
	QreeketGatewayService_UpdateAnnouncement_FullMethodName             = "/qreeket.QreeketGatewayService/UpdateAnnouncement"
	QreeketGatewayService_DeleteAnnouncement_FullMethodName             = "/qreeket.QreeketGatewayService/DeleteAnnouncement"
	QreeketGatewayService_SubscribeToAnnouncements_FullMethodName       = "/qreeket.QreeketGatewayService/SubscribeToAnnouncements"
	QreeketGatewayService_UnsubscribeFromAnnouncements_FullMethodName   = "/qreeket.QreeketGatewayService/UnsubscribeFromAnnouncements"
	QreeketGatewayService_Login_FullMethodName                          = "/qreeket.QreeketGatewayService/login"
	QreeketGatewayService_Register_FullMethodName                       = "/qreeket.QreeketGatewayService/register"
	QreeketGatewayService_ResetPassword_FullMethodName                  = "/qreeket.QreeketGatewayService/reset_password"
	QreeketGatewayService_RequestPasswordReset_FullMethodName           = "/qreeket.QreeketGatewayService/request_password_reset"
	QreeketGatewayService_Logout_FullMethodName                         = "/qreeket.QreeketGatewayService/logout"
	QreeketGatewayService_VerifyPassword_FullMethodName                 = "/qreeket.QreeketGatewayService/verify_password"
	QreeketGatewayService_UpgradeToPremium_FullMethodName               = "/qreeket.QreeketGatewayService/upgrade_to_premium"
	QreeketGatewayService_DowngradeToStandard_FullMethodName            = "/qreeket.QreeketGatewayService/downgrade_to_standard"
	QreeketGatewayService_RequestPublicAccessToken_FullMethodName       = "/qreeket.QreeketGatewayService/request_public_access_token"
	QreeketGatewayService_ValidateAccessToken_FullMethodName            = "/qreeket.QreeketGatewayService/validate_access_token"
	QreeketGatewayService_GetAccount_FullMethodName                     = "/qreeket.QreeketGatewayService/get_account"
	QreeketGatewayService_GetAccountByPhoneNumber_FullMethodName        = "/qreeket.QreeketGatewayService/get_account_by_phone_number"
	QreeketGatewayService_GetAccountById_FullMethodName                 = "/qreeket.QreeketGatewayService/get_account_by_id"
	QreeketGatewayService_UpdateAccount_FullMethodName                  = "/qreeket.QreeketGatewayService/update_account"
	QreeketGatewayService_DeleteAccount_FullMethodName                  = "/qreeket.QreeketGatewayService/delete_account"
	QreeketGatewayService_AuthenticateAccount_FullMethodName            = "/qreeket.QreeketGatewayService/authenticate_account"
	QreeketGatewayService_CheckEmail_FullMethodName                     = "/qreeket.QreeketGatewayService/check_email"
	QreeketGatewayService_CheckPhoneNumber_FullMethodName               = "/qreeket.QreeketGatewayService/check_phone_number"
	QreeketGatewayService_GetCountries_FullMethodName                   = "/qreeket.QreeketGatewayService/get_countries"
	QreeketGatewayService_GetCountryById_FullMethodName                 = "/qreeket.QreeketGatewayService/get_country_by_id"
	QreeketGatewayService_AddCountry_FullMethodName                     = "/qreeket.QreeketGatewayService/add_country"
	QreeketGatewayService_DeleteCountry_FullMethodName                  = "/qreeket.QreeketGatewayService/delete_country"
	QreeketGatewayService_GetCollegesForCountry_FullMethodName          = "/qreeket.QreeketGatewayService/get_colleges_for_country"
	QreeketGatewayService_GetCollegeById_FullMethodName                 = "/qreeket.QreeketGatewayService/get_college_by_id"
	QreeketGatewayService_AddCollege_FullMethodName                     = "/qreeket.QreeketGatewayService/add_college"
	QreeketGatewayService_DeleteCollege_FullMethodName                  = "/qreeket.QreeketGatewayService/delete_college"
	QreeketGatewayService_Charge_FullMethodName                         = "/qreeket.QreeketGatewayService/charge"
	QreeketGatewayService_GetTransaction_FullMethodName                 = "/qreeket.QreeketGatewayService/get_transaction"
	QreeketGatewayService_ListTransactions_FullMethodName               = "/qreeket.QreeketGatewayService/list_transactions"
	QreeketGatewayService_DeleteTransaction_FullMethodName              = "/qreeket.QreeketGatewayService/delete_transaction"
	QreeketGatewayService_CreateChannel_FullMethodName                  = "/qreeket.QreeketGatewayService/createChannel"
	QreeketGatewayService_GetChannel_FullMethodName                     = "/qreeket.QreeketGatewayService/getChannel"
	QreeketGatewayService_GetChannelsForGroup_FullMethodName            = "/qreeket.QreeketGatewayService/getChannelsForGroup"
	QreeketGatewayService_UpdateChannel_FullMethodName                  = "/qreeket.QreeketGatewayService/updateChannel"
	QreeketGatewayService_DeleteChannel_FullMethodName                  = "/qreeket.QreeketGatewayService/deleteChannel"
	QreeketGatewayService_LeaveChannel_FullMethodName                   = "/qreeket.QreeketGatewayService/leaveChannel"
	QreeketGatewayService_SubscribeToChannel_FullMethodName             = "/qreeket.QreeketGatewayService/subscribeToChannel"
	QreeketGatewayService_UnsubscribeFromChannel_FullMethodName         = "/qreeket.QreeketGatewayService/unsubscribeFromChannel"
	QreeketGatewayService_ManageChannelSubscription_FullMethodName      = "/qreeket.QreeketGatewayService/manageChannelSubscription"
	QreeketGatewayService_GetChannelSubscriptionsForUser_FullMethodName = "/qreeket.QreeketGatewayService/getChannelSubscriptionsForUser"
	QreeketGatewayService_MuteChannel_FullMethodName                    = "/qreeket.QreeketGatewayService/muteChannel"
	QreeketGatewayService_UnmuteChannel_FullMethodName                  = "/qreeket.QreeketGatewayService/unmuteChannel"
	QreeketGatewayService_CreateGroup_FullMethodName                    = "/qreeket.QreeketGatewayService/createGroup"
	QreeketGatewayService_GetGroup_FullMethodName                       = "/qreeket.QreeketGatewayService/getGroup"
	QreeketGatewayService_GetGroups_FullMethodName                      = "/qreeket.QreeketGatewayService/getGroups"
	QreeketGatewayService_UpdateGroup_FullMethodName                    = "/qreeket.QreeketGatewayService/updateGroup"
	QreeketGatewayService_DeleteGroup_FullMethodName                    = "/qreeket.QreeketGatewayService/deleteGroup"
	QreeketGatewayService_LeaveGroup_FullMethodName                     = "/qreeket.QreeketGatewayService/leaveGroup"
	QreeketGatewayService_InviteToGroup_FullMethodName                  = "/qreeket.QreeketGatewayService/inviteToGroup"
	QreeketGatewayService_GetGroupInvitesForUser_FullMethodName         = "/qreeket.QreeketGatewayService/getGroupInvitesForUser"
	QreeketGatewayService_GetGroupInvitesForGroup_FullMethodName        = "/qreeket.QreeketGatewayService/getGroupInvitesForGroup"
	QreeketGatewayService_RevokeGroupInvite_FullMethodName              = "/qreeket.QreeketGatewayService/revokeGroupInvite"
	QreeketGatewayService_ManageGroupInvite_FullMethodName              = "/qreeket.QreeketGatewayService/manageGroupInvite"
	QreeketGatewayService_MuteGroup_FullMethodName                      = "/qreeket.QreeketGatewayService/muteGroup"
	QreeketGatewayService_UnmuteGroup_FullMethodName                    = "/qreeket.QreeketGatewayService/unmuteGroup"
	QreeketGatewayService_PromoteGroupAdmin_FullMethodName              = "/qreeket.QreeketGatewayService/promoteGroupAdmin"
	QreeketGatewayService_DemoteGroupAdmin_FullMethodName               = "/qreeket.QreeketGatewayService/demoteGroupAdmin"
	QreeketGatewayService_BanFromGroup_FullMethodName                   = "/qreeket.QreeketGatewayService/banFromGroup"
	QreeketGatewayService_UnbanFromGroup_FullMethodName                 = "/qreeket.QreeketGatewayService/unbanFromGroup"
	QreeketGatewayService_UploadMedia_FullMethodName                    = "/qreeket.QreeketGatewayService/upload_media"
	QreeketGatewayService_UploadLargeMedia_FullMethodName               = "/qreeket.QreeketGatewayService/upload_large_media"
	QreeketGatewayService_GetMedia_FullMethodName                       = "/qreeket.QreeketGatewayService/get_media"
	QreeketGatewayService_DeleteMedia_FullMethodName                    = "/qreeket.QreeketGatewayService/delete_media"
	QreeketGatewayService_SendMessage_FullMethodName                    = "/qreeket.QreeketGatewayService/sendMessage"
	QreeketGatewayService_DeleteMessage_FullMethodName                  = "/qreeket.QreeketGatewayService/deleteMessage"
	QreeketGatewayService_GetMessages_FullMethodName                    = "/qreeket.QreeketGatewayService/getMessages"
	QreeketGatewayService_EditMessage_FullMethodName                    = "/qreeket.QreeketGatewayService/editMessage"
	QreeketGatewayService_ReactToMessage_FullMethodName                 = "/qreeket.QreeketGatewayService/reactToMessage"
	QreeketGatewayService_CreateThread_FullMethodName                   = "/qreeket.QreeketGatewayService/createThread"
	QreeketGatewayService_DeleteThread_FullMethodName                   = "/qreeket.QreeketGatewayService/deleteThread"
	QreeketGatewayService_GetThreads_FullMethodName                     = "/qreeket.QreeketGatewayService/getThreads"
	QreeketGatewayService_EditThread_FullMethodName                     = "/qreeket.QreeketGatewayService/editThread"
	QreeketGatewayService_ReactToThread_FullMethodName                  = "/qreeket.QreeketGatewayService/reactToThread"
	QreeketGatewayService_GetDirectMessengers_FullMethodName            = "/qreeket.QreeketGatewayService/getDirectMessengers"
	QreeketGatewayService_GetDirectMessages_FullMethodName              = "/qreeket.QreeketGatewayService/getDirectMessages"
	QreeketGatewayService_AddDirectMessenger_FullMethodName             = "/qreeket.QreeketGatewayService/addDirectMessenger"
	QreeketGatewayService_RemoveDirectMessenger_FullMethodName          = "/qreeket.QreeketGatewayService/removeDirectMessenger"
	QreeketGatewayService_SendPhoneVerificationCode_FullMethodName      = "/qreeket.QreeketGatewayService/send_phone_verification_code"
	QreeketGatewayService_VerifyPhoneVerificationCode_FullMethodName    = "/qreeket.QreeketGatewayService/verify_phone_verification_code"
)

// QreeketGatewayServiceClient is the client API for QreeketGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QreeketGatewayServiceClient interface {
	// region announcement
	GetAnnouncements(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (QreeketGatewayService_GetAnnouncementsClient, error)
	GetAnnouncement(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Announcement, error)
	CreateAnnouncement(ctx context.Context, in *CreateAnnouncementRequest, opts ...grpc.CallOption) (*Announcement, error)
	UpdateAnnouncement(ctx context.Context, in *UpdateAnnouncementRequest, opts ...grpc.CallOption) (*Announcement, error)
	DeleteAnnouncement(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SubscribeToAnnouncements(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnsubscribeFromAnnouncements(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// region auth
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	RequestPasswordReset(ctx context.Context, in *RequestPasswordResetRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	Logout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VerifyPassword(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpgradeToPremium(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DowngradeToStandard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RequestPublicAccessToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	ValidateAccessToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ValidateAccessTokenResponse, error)
	GetAccount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Account, error)
	GetAccountByPhoneNumber(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Account, error)
	GetAccountById(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Account, error)
	UpdateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error)
	DeleteAccount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AuthenticateAccount(ctx context.Context, in *AuthenticateWithSocialAccountRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	CheckEmail(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckPhoneNumber(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCountries(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCountriesResponse, error)
	GetCountryById(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Country, error)
	AddCountry(ctx context.Context, in *Country, opts ...grpc.CallOption) (*Country, error)
	DeleteCountry(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCollegesForCountry(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*GetCollegesResponse, error)
	GetCollegeById(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*College, error)
	AddCollege(ctx context.Context, in *College, opts ...grpc.CallOption) (*College, error)
	DeleteCollege(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// region billing
	Charge(ctx context.Context, in *ChargeRequest, opts ...grpc.CallOption) (*ChargeResponse, error)
	GetTransaction(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Transaction, error)
	ListTransactions(ctx context.Context, in *durationpb.Duration, opts ...grpc.CallOption) (*ListTransactionsResponse, error)
	DeleteTransaction(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// region group
	// region channels
	CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*Channel, error)
	GetChannel(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Channel, error)
	GetChannelsForGroup(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (QreeketGatewayService_GetChannelsForGroupClient, error)
	UpdateChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Channel, error)
	DeleteChannel(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LeaveChannel(ctx context.Context, in *ManageGroupOrChannel, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// user can only subscribe to / unsubscribe from public channels
	SubscribeToChannel(ctx context.Context, in *ChannelSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnsubscribeFromChannel(ctx context.Context, in *ChannelSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ManageChannelSubscription(ctx context.Context, in *ManageChannelSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetChannelSubscriptionsForUser(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (QreeketGatewayService_GetChannelSubscriptionsForUserClient, error)
	// all users can mute / unmute channels
	MuteChannel(ctx context.Context, in *ManageGroupOrChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnmuteChannel(ctx context.Context, in *ManageGroupOrChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// region groups
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*Group, error)
	GetGroup(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Group, error)
	GetGroups(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (QreeketGatewayService_GetGroupsClient, error)
	UpdateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LeaveGroup(ctx context.Context, in *ManageGroupOrChannel, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InviteToGroup(ctx context.Context, in *GroupInviteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetGroupInvitesForUser(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (QreeketGatewayService_GetGroupInvitesForUserClient, error)
	GetGroupInvitesForGroup(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (QreeketGatewayService_GetGroupInvitesForGroupClient, error)
	RevokeGroupInvite(ctx context.Context, in *RevokeGroupInviteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ManageGroupInvite(ctx context.Context, in *ManageGroupInviteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MuteGroup(ctx context.Context, in *ManageGroupOrChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnmuteGroup(ctx context.Context, in *ManageGroupOrChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PromoteGroupAdmin(ctx context.Context, in *ManageAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DemoteGroupAdmin(ctx context.Context, in *ManageAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BanFromGroup(ctx context.Context, in *ManageGroupOrChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnbanFromGroup(ctx context.Context, in *ManageGroupOrChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// region media
	UploadMedia(ctx context.Context, in *UploadMediaRequest, opts ...grpc.CallOption) (*UploadMediaResponse, error)
	UploadLargeMedia(ctx context.Context, opts ...grpc.CallOption) (QreeketGatewayService_UploadLargeMediaClient, error)
	GetMedia(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	DeleteMedia(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// region messaging
	SendMessage(ctx context.Context, in *MessageListItem, opts ...grpc.CallOption) (*MessageListItem, error)
	DeleteMessage(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (QreeketGatewayService_GetMessagesClient, error)
	EditMessage(ctx context.Context, in *MessageListItem, opts ...grpc.CallOption) (*MessageListItem, error)
	ReactToMessage(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*MessageListItem, error)
	CreateThread(ctx context.Context, in *MessageListItem, opts ...grpc.CallOption) (*MessageListItem, error)
	DeleteThread(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetThreads(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (QreeketGatewayService_GetThreadsClient, error)
	EditThread(ctx context.Context, in *MessageListItem, opts ...grpc.CallOption) (*MessageListItem, error)
	ReactToThread(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*MessageListItem, error)
	GetDirectMessengers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (QreeketGatewayService_GetDirectMessengersClient, error)
	GetDirectMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (QreeketGatewayService_GetDirectMessagesClient, error)
	AddDirectMessenger(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*DirectMessenger, error)
	RemoveDirectMessenger(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// region sms
	SendPhoneVerificationCode(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VerifyPhoneVerificationCode(ctx context.Context, in *VerifyPhoneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type qreeketGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQreeketGatewayServiceClient(cc grpc.ClientConnInterface) QreeketGatewayServiceClient {
	return &qreeketGatewayServiceClient{cc}
}

func (c *qreeketGatewayServiceClient) GetAnnouncements(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (QreeketGatewayService_GetAnnouncementsClient, error) {
	stream, err := c.cc.NewStream(ctx, &QreeketGatewayService_ServiceDesc.Streams[0], QreeketGatewayService_GetAnnouncements_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &qreeketGatewayServiceGetAnnouncementsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QreeketGatewayService_GetAnnouncementsClient interface {
	Recv() (*AnnouncementsList, error)
	grpc.ClientStream
}

type qreeketGatewayServiceGetAnnouncementsClient struct {
	grpc.ClientStream
}

func (x *qreeketGatewayServiceGetAnnouncementsClient) Recv() (*AnnouncementsList, error) {
	m := new(AnnouncementsList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *qreeketGatewayServiceClient) GetAnnouncement(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Announcement, error) {
	out := new(Announcement)
	err := c.cc.Invoke(ctx, QreeketGatewayService_GetAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) CreateAnnouncement(ctx context.Context, in *CreateAnnouncementRequest, opts ...grpc.CallOption) (*Announcement, error) {
	out := new(Announcement)
	err := c.cc.Invoke(ctx, QreeketGatewayService_CreateAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) UpdateAnnouncement(ctx context.Context, in *UpdateAnnouncementRequest, opts ...grpc.CallOption) (*Announcement, error) {
	out := new(Announcement)
	err := c.cc.Invoke(ctx, QreeketGatewayService_UpdateAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) DeleteAnnouncement(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_DeleteAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) SubscribeToAnnouncements(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_SubscribeToAnnouncements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) UnsubscribeFromAnnouncements(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_UnsubscribeFromAnnouncements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, QreeketGatewayService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, QreeketGatewayService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, QreeketGatewayService_ResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) RequestPasswordReset(ctx context.Context, in *RequestPasswordResetRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, QreeketGatewayService_RequestPasswordReset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) Logout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) VerifyPassword(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_VerifyPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) UpgradeToPremium(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_UpgradeToPremium_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) DowngradeToStandard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_DowngradeToStandard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) RequestPublicAccessToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, QreeketGatewayService_RequestPublicAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) ValidateAccessToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ValidateAccessTokenResponse, error) {
	out := new(ValidateAccessTokenResponse)
	err := c.cc.Invoke(ctx, QreeketGatewayService_ValidateAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) GetAccount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, QreeketGatewayService_GetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) GetAccountByPhoneNumber(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, QreeketGatewayService_GetAccountByPhoneNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) GetAccountById(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, QreeketGatewayService_GetAccountById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) UpdateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, QreeketGatewayService_UpdateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) DeleteAccount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_DeleteAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) AuthenticateAccount(ctx context.Context, in *AuthenticateWithSocialAccountRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, QreeketGatewayService_AuthenticateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) CheckEmail(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_CheckEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) CheckPhoneNumber(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_CheckPhoneNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) GetCountries(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCountriesResponse, error) {
	out := new(GetCountriesResponse)
	err := c.cc.Invoke(ctx, QreeketGatewayService_GetCountries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) GetCountryById(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Country, error) {
	out := new(Country)
	err := c.cc.Invoke(ctx, QreeketGatewayService_GetCountryById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) AddCountry(ctx context.Context, in *Country, opts ...grpc.CallOption) (*Country, error) {
	out := new(Country)
	err := c.cc.Invoke(ctx, QreeketGatewayService_AddCountry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) DeleteCountry(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_DeleteCountry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) GetCollegesForCountry(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*GetCollegesResponse, error) {
	out := new(GetCollegesResponse)
	err := c.cc.Invoke(ctx, QreeketGatewayService_GetCollegesForCountry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) GetCollegeById(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*College, error) {
	out := new(College)
	err := c.cc.Invoke(ctx, QreeketGatewayService_GetCollegeById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) AddCollege(ctx context.Context, in *College, opts ...grpc.CallOption) (*College, error) {
	out := new(College)
	err := c.cc.Invoke(ctx, QreeketGatewayService_AddCollege_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) DeleteCollege(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_DeleteCollege_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) Charge(ctx context.Context, in *ChargeRequest, opts ...grpc.CallOption) (*ChargeResponse, error) {
	out := new(ChargeResponse)
	err := c.cc.Invoke(ctx, QreeketGatewayService_Charge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) GetTransaction(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, QreeketGatewayService_GetTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) ListTransactions(ctx context.Context, in *durationpb.Duration, opts ...grpc.CallOption) (*ListTransactionsResponse, error) {
	out := new(ListTransactionsResponse)
	err := c.cc.Invoke(ctx, QreeketGatewayService_ListTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) DeleteTransaction(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_DeleteTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*Channel, error) {
	out := new(Channel)
	err := c.cc.Invoke(ctx, QreeketGatewayService_CreateChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) GetChannel(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Channel, error) {
	out := new(Channel)
	err := c.cc.Invoke(ctx, QreeketGatewayService_GetChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) GetChannelsForGroup(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (QreeketGatewayService_GetChannelsForGroupClient, error) {
	stream, err := c.cc.NewStream(ctx, &QreeketGatewayService_ServiceDesc.Streams[1], QreeketGatewayService_GetChannelsForGroup_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &qreeketGatewayServiceGetChannelsForGroupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QreeketGatewayService_GetChannelsForGroupClient interface {
	Recv() (*ChannelList, error)
	grpc.ClientStream
}

type qreeketGatewayServiceGetChannelsForGroupClient struct {
	grpc.ClientStream
}

func (x *qreeketGatewayServiceGetChannelsForGroupClient) Recv() (*ChannelList, error) {
	m := new(ChannelList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *qreeketGatewayServiceClient) UpdateChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Channel, error) {
	out := new(Channel)
	err := c.cc.Invoke(ctx, QreeketGatewayService_UpdateChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) DeleteChannel(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_DeleteChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) LeaveChannel(ctx context.Context, in *ManageGroupOrChannel, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_LeaveChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) SubscribeToChannel(ctx context.Context, in *ChannelSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_SubscribeToChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) UnsubscribeFromChannel(ctx context.Context, in *ChannelSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_UnsubscribeFromChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) ManageChannelSubscription(ctx context.Context, in *ManageChannelSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_ManageChannelSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) GetChannelSubscriptionsForUser(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (QreeketGatewayService_GetChannelSubscriptionsForUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &QreeketGatewayService_ServiceDesc.Streams[2], QreeketGatewayService_GetChannelSubscriptionsForUser_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &qreeketGatewayServiceGetChannelSubscriptionsForUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QreeketGatewayService_GetChannelSubscriptionsForUserClient interface {
	Recv() (*ChannelSubscriptionList, error)
	grpc.ClientStream
}

type qreeketGatewayServiceGetChannelSubscriptionsForUserClient struct {
	grpc.ClientStream
}

func (x *qreeketGatewayServiceGetChannelSubscriptionsForUserClient) Recv() (*ChannelSubscriptionList, error) {
	m := new(ChannelSubscriptionList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *qreeketGatewayServiceClient) MuteChannel(ctx context.Context, in *ManageGroupOrChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_MuteChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) UnmuteChannel(ctx context.Context, in *ManageGroupOrChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_UnmuteChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, QreeketGatewayService_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) GetGroup(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, QreeketGatewayService_GetGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) GetGroups(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (QreeketGatewayService_GetGroupsClient, error) {
	stream, err := c.cc.NewStream(ctx, &QreeketGatewayService_ServiceDesc.Streams[3], QreeketGatewayService_GetGroups_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &qreeketGatewayServiceGetGroupsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QreeketGatewayService_GetGroupsClient interface {
	Recv() (*GroupList, error)
	grpc.ClientStream
}

type qreeketGatewayServiceGetGroupsClient struct {
	grpc.ClientStream
}

func (x *qreeketGatewayServiceGetGroupsClient) Recv() (*GroupList, error) {
	m := new(GroupList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *qreeketGatewayServiceClient) UpdateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, QreeketGatewayService_UpdateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_DeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) LeaveGroup(ctx context.Context, in *ManageGroupOrChannel, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_LeaveGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) InviteToGroup(ctx context.Context, in *GroupInviteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_InviteToGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) GetGroupInvitesForUser(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (QreeketGatewayService_GetGroupInvitesForUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &QreeketGatewayService_ServiceDesc.Streams[4], QreeketGatewayService_GetGroupInvitesForUser_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &qreeketGatewayServiceGetGroupInvitesForUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QreeketGatewayService_GetGroupInvitesForUserClient interface {
	Recv() (*GroupInviteList, error)
	grpc.ClientStream
}

type qreeketGatewayServiceGetGroupInvitesForUserClient struct {
	grpc.ClientStream
}

func (x *qreeketGatewayServiceGetGroupInvitesForUserClient) Recv() (*GroupInviteList, error) {
	m := new(GroupInviteList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *qreeketGatewayServiceClient) GetGroupInvitesForGroup(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (QreeketGatewayService_GetGroupInvitesForGroupClient, error) {
	stream, err := c.cc.NewStream(ctx, &QreeketGatewayService_ServiceDesc.Streams[5], QreeketGatewayService_GetGroupInvitesForGroup_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &qreeketGatewayServiceGetGroupInvitesForGroupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QreeketGatewayService_GetGroupInvitesForGroupClient interface {
	Recv() (*GroupInviteList, error)
	grpc.ClientStream
}

type qreeketGatewayServiceGetGroupInvitesForGroupClient struct {
	grpc.ClientStream
}

func (x *qreeketGatewayServiceGetGroupInvitesForGroupClient) Recv() (*GroupInviteList, error) {
	m := new(GroupInviteList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *qreeketGatewayServiceClient) RevokeGroupInvite(ctx context.Context, in *RevokeGroupInviteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_RevokeGroupInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) ManageGroupInvite(ctx context.Context, in *ManageGroupInviteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_ManageGroupInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) MuteGroup(ctx context.Context, in *ManageGroupOrChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_MuteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) UnmuteGroup(ctx context.Context, in *ManageGroupOrChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_UnmuteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) PromoteGroupAdmin(ctx context.Context, in *ManageAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_PromoteGroupAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) DemoteGroupAdmin(ctx context.Context, in *ManageAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_DemoteGroupAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) BanFromGroup(ctx context.Context, in *ManageGroupOrChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_BanFromGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) UnbanFromGroup(ctx context.Context, in *ManageGroupOrChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_UnbanFromGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) UploadMedia(ctx context.Context, in *UploadMediaRequest, opts ...grpc.CallOption) (*UploadMediaResponse, error) {
	out := new(UploadMediaResponse)
	err := c.cc.Invoke(ctx, QreeketGatewayService_UploadMedia_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) UploadLargeMedia(ctx context.Context, opts ...grpc.CallOption) (QreeketGatewayService_UploadLargeMediaClient, error) {
	stream, err := c.cc.NewStream(ctx, &QreeketGatewayService_ServiceDesc.Streams[6], QreeketGatewayService_UploadLargeMedia_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &qreeketGatewayServiceUploadLargeMediaClient{stream}
	return x, nil
}

type QreeketGatewayService_UploadLargeMediaClient interface {
	Send(*UploadMediaRequest) error
	CloseAndRecv() (*UploadMediaResponse, error)
	grpc.ClientStream
}

type qreeketGatewayServiceUploadLargeMediaClient struct {
	grpc.ClientStream
}

func (x *qreeketGatewayServiceUploadLargeMediaClient) Send(m *UploadMediaRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *qreeketGatewayServiceUploadLargeMediaClient) CloseAndRecv() (*UploadMediaResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadMediaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *qreeketGatewayServiceClient) GetMedia(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, QreeketGatewayService_GetMedia_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) DeleteMedia(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_DeleteMedia_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) SendMessage(ctx context.Context, in *MessageListItem, opts ...grpc.CallOption) (*MessageListItem, error) {
	out := new(MessageListItem)
	err := c.cc.Invoke(ctx, QreeketGatewayService_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) DeleteMessage(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_DeleteMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (QreeketGatewayService_GetMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &QreeketGatewayService_ServiceDesc.Streams[7], QreeketGatewayService_GetMessages_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &qreeketGatewayServiceGetMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QreeketGatewayService_GetMessagesClient interface {
	Recv() (*MessageList, error)
	grpc.ClientStream
}

type qreeketGatewayServiceGetMessagesClient struct {
	grpc.ClientStream
}

func (x *qreeketGatewayServiceGetMessagesClient) Recv() (*MessageList, error) {
	m := new(MessageList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *qreeketGatewayServiceClient) EditMessage(ctx context.Context, in *MessageListItem, opts ...grpc.CallOption) (*MessageListItem, error) {
	out := new(MessageListItem)
	err := c.cc.Invoke(ctx, QreeketGatewayService_EditMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) ReactToMessage(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*MessageListItem, error) {
	out := new(MessageListItem)
	err := c.cc.Invoke(ctx, QreeketGatewayService_ReactToMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) CreateThread(ctx context.Context, in *MessageListItem, opts ...grpc.CallOption) (*MessageListItem, error) {
	out := new(MessageListItem)
	err := c.cc.Invoke(ctx, QreeketGatewayService_CreateThread_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) DeleteThread(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_DeleteThread_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) GetThreads(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (QreeketGatewayService_GetThreadsClient, error) {
	stream, err := c.cc.NewStream(ctx, &QreeketGatewayService_ServiceDesc.Streams[8], QreeketGatewayService_GetThreads_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &qreeketGatewayServiceGetThreadsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QreeketGatewayService_GetThreadsClient interface {
	Recv() (*MessageList, error)
	grpc.ClientStream
}

type qreeketGatewayServiceGetThreadsClient struct {
	grpc.ClientStream
}

func (x *qreeketGatewayServiceGetThreadsClient) Recv() (*MessageList, error) {
	m := new(MessageList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *qreeketGatewayServiceClient) EditThread(ctx context.Context, in *MessageListItem, opts ...grpc.CallOption) (*MessageListItem, error) {
	out := new(MessageListItem)
	err := c.cc.Invoke(ctx, QreeketGatewayService_EditThread_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) ReactToThread(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*MessageListItem, error) {
	out := new(MessageListItem)
	err := c.cc.Invoke(ctx, QreeketGatewayService_ReactToThread_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) GetDirectMessengers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (QreeketGatewayService_GetDirectMessengersClient, error) {
	stream, err := c.cc.NewStream(ctx, &QreeketGatewayService_ServiceDesc.Streams[9], QreeketGatewayService_GetDirectMessengers_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &qreeketGatewayServiceGetDirectMessengersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QreeketGatewayService_GetDirectMessengersClient interface {
	Recv() (*DirectMessengerList, error)
	grpc.ClientStream
}

type qreeketGatewayServiceGetDirectMessengersClient struct {
	grpc.ClientStream
}

func (x *qreeketGatewayServiceGetDirectMessengersClient) Recv() (*DirectMessengerList, error) {
	m := new(DirectMessengerList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *qreeketGatewayServiceClient) GetDirectMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (QreeketGatewayService_GetDirectMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &QreeketGatewayService_ServiceDesc.Streams[10], QreeketGatewayService_GetDirectMessages_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &qreeketGatewayServiceGetDirectMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QreeketGatewayService_GetDirectMessagesClient interface {
	Recv() (*MessageList, error)
	grpc.ClientStream
}

type qreeketGatewayServiceGetDirectMessagesClient struct {
	grpc.ClientStream
}

func (x *qreeketGatewayServiceGetDirectMessagesClient) Recv() (*MessageList, error) {
	m := new(MessageList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *qreeketGatewayServiceClient) AddDirectMessenger(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*DirectMessenger, error) {
	out := new(DirectMessenger)
	err := c.cc.Invoke(ctx, QreeketGatewayService_AddDirectMessenger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) RemoveDirectMessenger(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_RemoveDirectMessenger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) SendPhoneVerificationCode(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_SendPhoneVerificationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qreeketGatewayServiceClient) VerifyPhoneVerificationCode(ctx context.Context, in *VerifyPhoneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QreeketGatewayService_VerifyPhoneVerificationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QreeketGatewayServiceServer is the server API for QreeketGatewayService service.
// All implementations must embed UnimplementedQreeketGatewayServiceServer
// for forward compatibility
type QreeketGatewayServiceServer interface {
	// region announcement
	GetAnnouncements(*emptypb.Empty, QreeketGatewayService_GetAnnouncementsServer) error
	GetAnnouncement(context.Context, *wrapperspb.StringValue) (*Announcement, error)
	CreateAnnouncement(context.Context, *CreateAnnouncementRequest) (*Announcement, error)
	UpdateAnnouncement(context.Context, *UpdateAnnouncementRequest) (*Announcement, error)
	DeleteAnnouncement(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	SubscribeToAnnouncements(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	UnsubscribeFromAnnouncements(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// region auth
	Login(context.Context, *LoginRequest) (*wrapperspb.StringValue, error)
	Register(context.Context, *RegisterRequest) (*wrapperspb.StringValue, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*wrapperspb.StringValue, error)
	RequestPasswordReset(context.Context, *RequestPasswordResetRequest) (*wrapperspb.StringValue, error)
	Logout(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	VerifyPassword(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	UpgradeToPremium(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	DowngradeToStandard(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	RequestPublicAccessToken(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error)
	ValidateAccessToken(context.Context, *emptypb.Empty) (*ValidateAccessTokenResponse, error)
	GetAccount(context.Context, *emptypb.Empty) (*Account, error)
	GetAccountByPhoneNumber(context.Context, *wrapperspb.StringValue) (*Account, error)
	GetAccountById(context.Context, *wrapperspb.StringValue) (*Account, error)
	UpdateAccount(context.Context, *Account) (*Account, error)
	DeleteAccount(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	AuthenticateAccount(context.Context, *AuthenticateWithSocialAccountRequest) (*wrapperspb.StringValue, error)
	CheckEmail(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	CheckPhoneNumber(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	GetCountries(context.Context, *emptypb.Empty) (*GetCountriesResponse, error)
	GetCountryById(context.Context, *wrapperspb.StringValue) (*Country, error)
	AddCountry(context.Context, *Country) (*Country, error)
	DeleteCountry(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	GetCollegesForCountry(context.Context, *wrapperspb.StringValue) (*GetCollegesResponse, error)
	GetCollegeById(context.Context, *wrapperspb.StringValue) (*College, error)
	AddCollege(context.Context, *College) (*College, error)
	DeleteCollege(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// region billing
	Charge(context.Context, *ChargeRequest) (*ChargeResponse, error)
	GetTransaction(context.Context, *wrapperspb.StringValue) (*Transaction, error)
	ListTransactions(context.Context, *durationpb.Duration) (*ListTransactionsResponse, error)
	DeleteTransaction(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// region group
	// region channels
	CreateChannel(context.Context, *CreateChannelRequest) (*Channel, error)
	GetChannel(context.Context, *wrapperspb.StringValue) (*Channel, error)
	GetChannelsForGroup(*wrapperspb.StringValue, QreeketGatewayService_GetChannelsForGroupServer) error
	UpdateChannel(context.Context, *Channel) (*Channel, error)
	DeleteChannel(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	LeaveChannel(context.Context, *ManageGroupOrChannel) (*emptypb.Empty, error)
	// user can only subscribe to / unsubscribe from public channels
	SubscribeToChannel(context.Context, *ChannelSubscriptionRequest) (*emptypb.Empty, error)
	UnsubscribeFromChannel(context.Context, *ChannelSubscriptionRequest) (*emptypb.Empty, error)
	ManageChannelSubscription(context.Context, *ManageChannelSubscriptionRequest) (*emptypb.Empty, error)
	GetChannelSubscriptionsForUser(*wrapperspb.StringValue, QreeketGatewayService_GetChannelSubscriptionsForUserServer) error
	// all users can mute / unmute channels
	MuteChannel(context.Context, *ManageGroupOrChannelRequest) (*emptypb.Empty, error)
	UnmuteChannel(context.Context, *ManageGroupOrChannelRequest) (*emptypb.Empty, error)
	// region groups
	CreateGroup(context.Context, *CreateGroupRequest) (*Group, error)
	GetGroup(context.Context, *wrapperspb.StringValue) (*Group, error)
	GetGroups(*wrapperspb.StringValue, QreeketGatewayService_GetGroupsServer) error
	UpdateGroup(context.Context, *Group) (*Group, error)
	DeleteGroup(context.Context, *DeleteGroupRequest) (*emptypb.Empty, error)
	LeaveGroup(context.Context, *ManageGroupOrChannel) (*emptypb.Empty, error)
	InviteToGroup(context.Context, *GroupInviteRequest) (*emptypb.Empty, error)
	GetGroupInvitesForUser(*wrapperspb.StringValue, QreeketGatewayService_GetGroupInvitesForUserServer) error
	GetGroupInvitesForGroup(*wrapperspb.StringValue, QreeketGatewayService_GetGroupInvitesForGroupServer) error
	RevokeGroupInvite(context.Context, *RevokeGroupInviteRequest) (*emptypb.Empty, error)
	ManageGroupInvite(context.Context, *ManageGroupInviteRequest) (*emptypb.Empty, error)
	MuteGroup(context.Context, *ManageGroupOrChannelRequest) (*emptypb.Empty, error)
	UnmuteGroup(context.Context, *ManageGroupOrChannelRequest) (*emptypb.Empty, error)
	PromoteGroupAdmin(context.Context, *ManageAdminRequest) (*emptypb.Empty, error)
	DemoteGroupAdmin(context.Context, *ManageAdminRequest) (*emptypb.Empty, error)
	BanFromGroup(context.Context, *ManageGroupOrChannelRequest) (*emptypb.Empty, error)
	UnbanFromGroup(context.Context, *ManageGroupOrChannelRequest) (*emptypb.Empty, error)
	// region media
	UploadMedia(context.Context, *UploadMediaRequest) (*UploadMediaResponse, error)
	UploadLargeMedia(QreeketGatewayService_UploadLargeMediaServer) error
	GetMedia(context.Context, *wrapperspb.StringValue) (*wrapperspb.StringValue, error)
	DeleteMedia(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// region messaging
	SendMessage(context.Context, *MessageListItem) (*MessageListItem, error)
	DeleteMessage(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	GetMessages(*GetMessagesRequest, QreeketGatewayService_GetMessagesServer) error
	EditMessage(context.Context, *MessageListItem) (*MessageListItem, error)
	ReactToMessage(context.Context, *wrapperspb.StringValue) (*MessageListItem, error)
	CreateThread(context.Context, *MessageListItem) (*MessageListItem, error)
	DeleteThread(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	GetThreads(*GetMessagesRequest, QreeketGatewayService_GetThreadsServer) error
	EditThread(context.Context, *MessageListItem) (*MessageListItem, error)
	ReactToThread(context.Context, *wrapperspb.StringValue) (*MessageListItem, error)
	GetDirectMessengers(*emptypb.Empty, QreeketGatewayService_GetDirectMessengersServer) error
	GetDirectMessages(*GetMessagesRequest, QreeketGatewayService_GetDirectMessagesServer) error
	AddDirectMessenger(context.Context, *wrapperspb.StringValue) (*DirectMessenger, error)
	RemoveDirectMessenger(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// region sms
	SendPhoneVerificationCode(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	VerifyPhoneVerificationCode(context.Context, *VerifyPhoneRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedQreeketGatewayServiceServer()
}

// UnimplementedQreeketGatewayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQreeketGatewayServiceServer struct {
}

func (UnimplementedQreeketGatewayServiceServer) GetAnnouncements(*emptypb.Empty, QreeketGatewayService_GetAnnouncementsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAnnouncements not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) GetAnnouncement(context.Context, *wrapperspb.StringValue) (*Announcement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnouncement not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) CreateAnnouncement(context.Context, *CreateAnnouncementRequest) (*Announcement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnnouncement not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) UpdateAnnouncement(context.Context, *UpdateAnnouncementRequest) (*Announcement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnnouncement not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) DeleteAnnouncement(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnnouncement not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) SubscribeToAnnouncements(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeToAnnouncements not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) UnsubscribeFromAnnouncements(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeFromAnnouncements not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) Login(context.Context, *LoginRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) Register(context.Context, *RegisterRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) ResetPassword(context.Context, *ResetPasswordRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) RequestPasswordReset(context.Context, *RequestPasswordResetRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPasswordReset not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) Logout(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) VerifyPassword(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPassword not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) UpgradeToPremium(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeToPremium not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) DowngradeToStandard(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DowngradeToStandard not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) RequestPublicAccessToken(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPublicAccessToken not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) ValidateAccessToken(context.Context, *emptypb.Empty) (*ValidateAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAccessToken not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) GetAccount(context.Context, *emptypb.Empty) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) GetAccountByPhoneNumber(context.Context, *wrapperspb.StringValue) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByPhoneNumber not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) GetAccountById(context.Context, *wrapperspb.StringValue) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountById not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) UpdateAccount(context.Context, *Account) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) DeleteAccount(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) AuthenticateAccount(context.Context, *AuthenticateWithSocialAccountRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateAccount not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) CheckEmail(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEmail not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) CheckPhoneNumber(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPhoneNumber not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) GetCountries(context.Context, *emptypb.Empty) (*GetCountriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountries not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) GetCountryById(context.Context, *wrapperspb.StringValue) (*Country, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountryById not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) AddCountry(context.Context, *Country) (*Country, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCountry not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) DeleteCountry(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCountry not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) GetCollegesForCountry(context.Context, *wrapperspb.StringValue) (*GetCollegesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollegesForCountry not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) GetCollegeById(context.Context, *wrapperspb.StringValue) (*College, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollegeById not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) AddCollege(context.Context, *College) (*College, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCollege not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) DeleteCollege(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollege not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) Charge(context.Context, *ChargeRequest) (*ChargeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Charge not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) GetTransaction(context.Context, *wrapperspb.StringValue) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) ListTransactions(context.Context, *durationpb.Duration) (*ListTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactions not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) DeleteTransaction(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransaction not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) CreateChannel(context.Context, *CreateChannelRequest) (*Channel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) GetChannel(context.Context, *wrapperspb.StringValue) (*Channel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannel not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) GetChannelsForGroup(*wrapperspb.StringValue, QreeketGatewayService_GetChannelsForGroupServer) error {
	return status.Errorf(codes.Unimplemented, "method GetChannelsForGroup not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) UpdateChannel(context.Context, *Channel) (*Channel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannel not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) DeleteChannel(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) LeaveChannel(context.Context, *ManageGroupOrChannel) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveChannel not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) SubscribeToChannel(context.Context, *ChannelSubscriptionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeToChannel not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) UnsubscribeFromChannel(context.Context, *ChannelSubscriptionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeFromChannel not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) ManageChannelSubscription(context.Context, *ManageChannelSubscriptionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageChannelSubscription not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) GetChannelSubscriptionsForUser(*wrapperspb.StringValue, QreeketGatewayService_GetChannelSubscriptionsForUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GetChannelSubscriptionsForUser not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) MuteChannel(context.Context, *ManageGroupOrChannelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuteChannel not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) UnmuteChannel(context.Context, *ManageGroupOrChannelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmuteChannel not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) CreateGroup(context.Context, *CreateGroupRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) GetGroup(context.Context, *wrapperspb.StringValue) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) GetGroups(*wrapperspb.StringValue, QreeketGatewayService_GetGroupsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) UpdateGroup(context.Context, *Group) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) LeaveGroup(context.Context, *ManageGroupOrChannel) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGroup not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) InviteToGroup(context.Context, *GroupInviteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteToGroup not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) GetGroupInvitesForUser(*wrapperspb.StringValue, QreeketGatewayService_GetGroupInvitesForUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GetGroupInvitesForUser not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) GetGroupInvitesForGroup(*wrapperspb.StringValue, QreeketGatewayService_GetGroupInvitesForGroupServer) error {
	return status.Errorf(codes.Unimplemented, "method GetGroupInvitesForGroup not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) RevokeGroupInvite(context.Context, *RevokeGroupInviteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeGroupInvite not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) ManageGroupInvite(context.Context, *ManageGroupInviteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageGroupInvite not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) MuteGroup(context.Context, *ManageGroupOrChannelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuteGroup not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) UnmuteGroup(context.Context, *ManageGroupOrChannelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmuteGroup not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) PromoteGroupAdmin(context.Context, *ManageAdminRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteGroupAdmin not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) DemoteGroupAdmin(context.Context, *ManageAdminRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoteGroupAdmin not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) BanFromGroup(context.Context, *ManageGroupOrChannelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanFromGroup not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) UnbanFromGroup(context.Context, *ManageGroupOrChannelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbanFromGroup not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) UploadMedia(context.Context, *UploadMediaRequest) (*UploadMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadMedia not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) UploadLargeMedia(QreeketGatewayService_UploadLargeMediaServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadLargeMedia not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) GetMedia(context.Context, *wrapperspb.StringValue) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedia not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) DeleteMedia(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedia not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) SendMessage(context.Context, *MessageListItem) (*MessageListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) DeleteMessage(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) GetMessages(*GetMessagesRequest, QreeketGatewayService_GetMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) EditMessage(context.Context, *MessageListItem) (*MessageListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMessage not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) ReactToMessage(context.Context, *wrapperspb.StringValue) (*MessageListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactToMessage not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) CreateThread(context.Context, *MessageListItem) (*MessageListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThread not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) DeleteThread(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteThread not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) GetThreads(*GetMessagesRequest, QreeketGatewayService_GetThreadsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetThreads not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) EditThread(context.Context, *MessageListItem) (*MessageListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditThread not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) ReactToThread(context.Context, *wrapperspb.StringValue) (*MessageListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactToThread not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) GetDirectMessengers(*emptypb.Empty, QreeketGatewayService_GetDirectMessengersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDirectMessengers not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) GetDirectMessages(*GetMessagesRequest, QreeketGatewayService_GetDirectMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDirectMessages not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) AddDirectMessenger(context.Context, *wrapperspb.StringValue) (*DirectMessenger, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDirectMessenger not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) RemoveDirectMessenger(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDirectMessenger not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) SendPhoneVerificationCode(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPhoneVerificationCode not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) VerifyPhoneVerificationCode(context.Context, *VerifyPhoneRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPhoneVerificationCode not implemented")
}
func (UnimplementedQreeketGatewayServiceServer) mustEmbedUnimplementedQreeketGatewayServiceServer() {}

// UnsafeQreeketGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QreeketGatewayServiceServer will
// result in compilation errors.
type UnsafeQreeketGatewayServiceServer interface {
	mustEmbedUnimplementedQreeketGatewayServiceServer()
}

func RegisterQreeketGatewayServiceServer(s grpc.ServiceRegistrar, srv QreeketGatewayServiceServer) {
	s.RegisterService(&QreeketGatewayService_ServiceDesc, srv)
}

func _QreeketGatewayService_GetAnnouncements_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QreeketGatewayServiceServer).GetAnnouncements(m, &qreeketGatewayServiceGetAnnouncementsServer{stream})
}

type QreeketGatewayService_GetAnnouncementsServer interface {
	Send(*AnnouncementsList) error
	grpc.ServerStream
}

type qreeketGatewayServiceGetAnnouncementsServer struct {
	grpc.ServerStream
}

func (x *qreeketGatewayServiceGetAnnouncementsServer) Send(m *AnnouncementsList) error {
	return x.ServerStream.SendMsg(m)
}

func _QreeketGatewayService_GetAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).GetAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_GetAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).GetAnnouncement(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_CreateAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).CreateAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_CreateAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).CreateAnnouncement(ctx, req.(*CreateAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_UpdateAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).UpdateAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_UpdateAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).UpdateAnnouncement(ctx, req.(*UpdateAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_DeleteAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).DeleteAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_DeleteAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).DeleteAnnouncement(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_SubscribeToAnnouncements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).SubscribeToAnnouncements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_SubscribeToAnnouncements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).SubscribeToAnnouncements(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_UnsubscribeFromAnnouncements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).UnsubscribeFromAnnouncements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_UnsubscribeFromAnnouncements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).UnsubscribeFromAnnouncements(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_RequestPasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).RequestPasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_RequestPasswordReset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).RequestPasswordReset(ctx, req.(*RequestPasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).Logout(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_VerifyPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).VerifyPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_VerifyPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).VerifyPassword(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_UpgradeToPremium_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).UpgradeToPremium(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_UpgradeToPremium_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).UpgradeToPremium(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_DowngradeToStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).DowngradeToStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_DowngradeToStandard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).DowngradeToStandard(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_RequestPublicAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).RequestPublicAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_RequestPublicAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).RequestPublicAccessToken(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_ValidateAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).ValidateAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_ValidateAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).ValidateAccessToken(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).GetAccount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_GetAccountByPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).GetAccountByPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_GetAccountByPhoneNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).GetAccountByPhoneNumber(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_GetAccountById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).GetAccountById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_GetAccountById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).GetAccountById(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_UpdateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).UpdateAccount(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).DeleteAccount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_AuthenticateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateWithSocialAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).AuthenticateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_AuthenticateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).AuthenticateAccount(ctx, req.(*AuthenticateWithSocialAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_CheckEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).CheckEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_CheckEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).CheckEmail(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_CheckPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).CheckPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_CheckPhoneNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).CheckPhoneNumber(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_GetCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).GetCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_GetCountries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).GetCountries(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_GetCountryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).GetCountryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_GetCountryById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).GetCountryById(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_AddCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Country)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).AddCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_AddCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).AddCountry(ctx, req.(*Country))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_DeleteCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).DeleteCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_DeleteCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).DeleteCountry(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_GetCollegesForCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).GetCollegesForCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_GetCollegesForCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).GetCollegesForCountry(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_GetCollegeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).GetCollegeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_GetCollegeById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).GetCollegeById(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_AddCollege_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(College)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).AddCollege(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_AddCollege_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).AddCollege(ctx, req.(*College))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_DeleteCollege_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).DeleteCollege(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_DeleteCollege_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).DeleteCollege(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_Charge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).Charge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_Charge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).Charge(ctx, req.(*ChargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_GetTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).GetTransaction(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_ListTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(durationpb.Duration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).ListTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_ListTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).ListTransactions(ctx, req.(*durationpb.Duration))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_DeleteTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).DeleteTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_DeleteTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).DeleteTransaction(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_CreateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).CreateChannel(ctx, req.(*CreateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_GetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).GetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_GetChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).GetChannel(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_GetChannelsForGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QreeketGatewayServiceServer).GetChannelsForGroup(m, &qreeketGatewayServiceGetChannelsForGroupServer{stream})
}

type QreeketGatewayService_GetChannelsForGroupServer interface {
	Send(*ChannelList) error
	grpc.ServerStream
}

type qreeketGatewayServiceGetChannelsForGroupServer struct {
	grpc.ServerStream
}

func (x *qreeketGatewayServiceGetChannelsForGroupServer) Send(m *ChannelList) error {
	return x.ServerStream.SendMsg(m)
}

func _QreeketGatewayService_UpdateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).UpdateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_UpdateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).UpdateChannel(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_DeleteChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).DeleteChannel(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_LeaveChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageGroupOrChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).LeaveChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_LeaveChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).LeaveChannel(ctx, req.(*ManageGroupOrChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_SubscribeToChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).SubscribeToChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_SubscribeToChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).SubscribeToChannel(ctx, req.(*ChannelSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_UnsubscribeFromChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).UnsubscribeFromChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_UnsubscribeFromChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).UnsubscribeFromChannel(ctx, req.(*ChannelSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_ManageChannelSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageChannelSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).ManageChannelSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_ManageChannelSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).ManageChannelSubscription(ctx, req.(*ManageChannelSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_GetChannelSubscriptionsForUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QreeketGatewayServiceServer).GetChannelSubscriptionsForUser(m, &qreeketGatewayServiceGetChannelSubscriptionsForUserServer{stream})
}

type QreeketGatewayService_GetChannelSubscriptionsForUserServer interface {
	Send(*ChannelSubscriptionList) error
	grpc.ServerStream
}

type qreeketGatewayServiceGetChannelSubscriptionsForUserServer struct {
	grpc.ServerStream
}

func (x *qreeketGatewayServiceGetChannelSubscriptionsForUserServer) Send(m *ChannelSubscriptionList) error {
	return x.ServerStream.SendMsg(m)
}

func _QreeketGatewayService_MuteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageGroupOrChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).MuteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_MuteChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).MuteChannel(ctx, req.(*ManageGroupOrChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_UnmuteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageGroupOrChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).UnmuteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_UnmuteChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).UnmuteChannel(ctx, req.(*ManageGroupOrChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).GetGroup(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_GetGroups_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QreeketGatewayServiceServer).GetGroups(m, &qreeketGatewayServiceGetGroupsServer{stream})
}

type QreeketGatewayService_GetGroupsServer interface {
	Send(*GroupList) error
	grpc.ServerStream
}

type qreeketGatewayServiceGetGroupsServer struct {
	grpc.ServerStream
}

func (x *qreeketGatewayServiceGetGroupsServer) Send(m *GroupList) error {
	return x.ServerStream.SendMsg(m)
}

func _QreeketGatewayService_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).UpdateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageGroupOrChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_LeaveGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).LeaveGroup(ctx, req.(*ManageGroupOrChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_InviteToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).InviteToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_InviteToGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).InviteToGroup(ctx, req.(*GroupInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_GetGroupInvitesForUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QreeketGatewayServiceServer).GetGroupInvitesForUser(m, &qreeketGatewayServiceGetGroupInvitesForUserServer{stream})
}

type QreeketGatewayService_GetGroupInvitesForUserServer interface {
	Send(*GroupInviteList) error
	grpc.ServerStream
}

type qreeketGatewayServiceGetGroupInvitesForUserServer struct {
	grpc.ServerStream
}

func (x *qreeketGatewayServiceGetGroupInvitesForUserServer) Send(m *GroupInviteList) error {
	return x.ServerStream.SendMsg(m)
}

func _QreeketGatewayService_GetGroupInvitesForGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QreeketGatewayServiceServer).GetGroupInvitesForGroup(m, &qreeketGatewayServiceGetGroupInvitesForGroupServer{stream})
}

type QreeketGatewayService_GetGroupInvitesForGroupServer interface {
	Send(*GroupInviteList) error
	grpc.ServerStream
}

type qreeketGatewayServiceGetGroupInvitesForGroupServer struct {
	grpc.ServerStream
}

func (x *qreeketGatewayServiceGetGroupInvitesForGroupServer) Send(m *GroupInviteList) error {
	return x.ServerStream.SendMsg(m)
}

func _QreeketGatewayService_RevokeGroupInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeGroupInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).RevokeGroupInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_RevokeGroupInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).RevokeGroupInvite(ctx, req.(*RevokeGroupInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_ManageGroupInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageGroupInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).ManageGroupInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_ManageGroupInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).ManageGroupInvite(ctx, req.(*ManageGroupInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_MuteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageGroupOrChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).MuteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_MuteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).MuteGroup(ctx, req.(*ManageGroupOrChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_UnmuteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageGroupOrChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).UnmuteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_UnmuteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).UnmuteGroup(ctx, req.(*ManageGroupOrChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_PromoteGroupAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).PromoteGroupAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_PromoteGroupAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).PromoteGroupAdmin(ctx, req.(*ManageAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_DemoteGroupAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).DemoteGroupAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_DemoteGroupAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).DemoteGroupAdmin(ctx, req.(*ManageAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_BanFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageGroupOrChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).BanFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_BanFromGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).BanFromGroup(ctx, req.(*ManageGroupOrChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_UnbanFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageGroupOrChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).UnbanFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_UnbanFromGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).UnbanFromGroup(ctx, req.(*ManageGroupOrChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_UploadMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).UploadMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_UploadMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).UploadMedia(ctx, req.(*UploadMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_UploadLargeMedia_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QreeketGatewayServiceServer).UploadLargeMedia(&qreeketGatewayServiceUploadLargeMediaServer{stream})
}

type QreeketGatewayService_UploadLargeMediaServer interface {
	SendAndClose(*UploadMediaResponse) error
	Recv() (*UploadMediaRequest, error)
	grpc.ServerStream
}

type qreeketGatewayServiceUploadLargeMediaServer struct {
	grpc.ServerStream
}

func (x *qreeketGatewayServiceUploadLargeMediaServer) SendAndClose(m *UploadMediaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *qreeketGatewayServiceUploadLargeMediaServer) Recv() (*UploadMediaRequest, error) {
	m := new(UploadMediaRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _QreeketGatewayService_GetMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).GetMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_GetMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).GetMedia(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_DeleteMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).DeleteMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_DeleteMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).DeleteMedia(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageListItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).SendMessage(ctx, req.(*MessageListItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).DeleteMessage(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_GetMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QreeketGatewayServiceServer).GetMessages(m, &qreeketGatewayServiceGetMessagesServer{stream})
}

type QreeketGatewayService_GetMessagesServer interface {
	Send(*MessageList) error
	grpc.ServerStream
}

type qreeketGatewayServiceGetMessagesServer struct {
	grpc.ServerStream
}

func (x *qreeketGatewayServiceGetMessagesServer) Send(m *MessageList) error {
	return x.ServerStream.SendMsg(m)
}

func _QreeketGatewayService_EditMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageListItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).EditMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_EditMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).EditMessage(ctx, req.(*MessageListItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_ReactToMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).ReactToMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_ReactToMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).ReactToMessage(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_CreateThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageListItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).CreateThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_CreateThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).CreateThread(ctx, req.(*MessageListItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_DeleteThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).DeleteThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_DeleteThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).DeleteThread(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_GetThreads_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QreeketGatewayServiceServer).GetThreads(m, &qreeketGatewayServiceGetThreadsServer{stream})
}

type QreeketGatewayService_GetThreadsServer interface {
	Send(*MessageList) error
	grpc.ServerStream
}

type qreeketGatewayServiceGetThreadsServer struct {
	grpc.ServerStream
}

func (x *qreeketGatewayServiceGetThreadsServer) Send(m *MessageList) error {
	return x.ServerStream.SendMsg(m)
}

func _QreeketGatewayService_EditThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageListItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).EditThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_EditThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).EditThread(ctx, req.(*MessageListItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_ReactToThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).ReactToThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_ReactToThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).ReactToThread(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_GetDirectMessengers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QreeketGatewayServiceServer).GetDirectMessengers(m, &qreeketGatewayServiceGetDirectMessengersServer{stream})
}

type QreeketGatewayService_GetDirectMessengersServer interface {
	Send(*DirectMessengerList) error
	grpc.ServerStream
}

type qreeketGatewayServiceGetDirectMessengersServer struct {
	grpc.ServerStream
}

func (x *qreeketGatewayServiceGetDirectMessengersServer) Send(m *DirectMessengerList) error {
	return x.ServerStream.SendMsg(m)
}

func _QreeketGatewayService_GetDirectMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QreeketGatewayServiceServer).GetDirectMessages(m, &qreeketGatewayServiceGetDirectMessagesServer{stream})
}

type QreeketGatewayService_GetDirectMessagesServer interface {
	Send(*MessageList) error
	grpc.ServerStream
}

type qreeketGatewayServiceGetDirectMessagesServer struct {
	grpc.ServerStream
}

func (x *qreeketGatewayServiceGetDirectMessagesServer) Send(m *MessageList) error {
	return x.ServerStream.SendMsg(m)
}

func _QreeketGatewayService_AddDirectMessenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).AddDirectMessenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_AddDirectMessenger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).AddDirectMessenger(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_RemoveDirectMessenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).RemoveDirectMessenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_RemoveDirectMessenger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).RemoveDirectMessenger(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_SendPhoneVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).SendPhoneVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_SendPhoneVerificationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).SendPhoneVerificationCode(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _QreeketGatewayService_VerifyPhoneVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QreeketGatewayServiceServer).VerifyPhoneVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QreeketGatewayService_VerifyPhoneVerificationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QreeketGatewayServiceServer).VerifyPhoneVerificationCode(ctx, req.(*VerifyPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QreeketGatewayService_ServiceDesc is the grpc.ServiceDesc for QreeketGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QreeketGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qreeket.QreeketGatewayService",
	HandlerType: (*QreeketGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAnnouncement",
			Handler:    _QreeketGatewayService_GetAnnouncement_Handler,
		},
		{
			MethodName: "CreateAnnouncement",
			Handler:    _QreeketGatewayService_CreateAnnouncement_Handler,
		},
		{
			MethodName: "UpdateAnnouncement",
			Handler:    _QreeketGatewayService_UpdateAnnouncement_Handler,
		},
		{
			MethodName: "DeleteAnnouncement",
			Handler:    _QreeketGatewayService_DeleteAnnouncement_Handler,
		},
		{
			MethodName: "SubscribeToAnnouncements",
			Handler:    _QreeketGatewayService_SubscribeToAnnouncements_Handler,
		},
		{
			MethodName: "UnsubscribeFromAnnouncements",
			Handler:    _QreeketGatewayService_UnsubscribeFromAnnouncements_Handler,
		},
		{
			MethodName: "login",
			Handler:    _QreeketGatewayService_Login_Handler,
		},
		{
			MethodName: "register",
			Handler:    _QreeketGatewayService_Register_Handler,
		},
		{
			MethodName: "reset_password",
			Handler:    _QreeketGatewayService_ResetPassword_Handler,
		},
		{
			MethodName: "request_password_reset",
			Handler:    _QreeketGatewayService_RequestPasswordReset_Handler,
		},
		{
			MethodName: "logout",
			Handler:    _QreeketGatewayService_Logout_Handler,
		},
		{
			MethodName: "verify_password",
			Handler:    _QreeketGatewayService_VerifyPassword_Handler,
		},
		{
			MethodName: "upgrade_to_premium",
			Handler:    _QreeketGatewayService_UpgradeToPremium_Handler,
		},
		{
			MethodName: "downgrade_to_standard",
			Handler:    _QreeketGatewayService_DowngradeToStandard_Handler,
		},
		{
			MethodName: "request_public_access_token",
			Handler:    _QreeketGatewayService_RequestPublicAccessToken_Handler,
		},
		{
			MethodName: "validate_access_token",
			Handler:    _QreeketGatewayService_ValidateAccessToken_Handler,
		},
		{
			MethodName: "get_account",
			Handler:    _QreeketGatewayService_GetAccount_Handler,
		},
		{
			MethodName: "get_account_by_phone_number",
			Handler:    _QreeketGatewayService_GetAccountByPhoneNumber_Handler,
		},
		{
			MethodName: "get_account_by_id",
			Handler:    _QreeketGatewayService_GetAccountById_Handler,
		},
		{
			MethodName: "update_account",
			Handler:    _QreeketGatewayService_UpdateAccount_Handler,
		},
		{
			MethodName: "delete_account",
			Handler:    _QreeketGatewayService_DeleteAccount_Handler,
		},
		{
			MethodName: "authenticate_account",
			Handler:    _QreeketGatewayService_AuthenticateAccount_Handler,
		},
		{
			MethodName: "check_email",
			Handler:    _QreeketGatewayService_CheckEmail_Handler,
		},
		{
			MethodName: "check_phone_number",
			Handler:    _QreeketGatewayService_CheckPhoneNumber_Handler,
		},
		{
			MethodName: "get_countries",
			Handler:    _QreeketGatewayService_GetCountries_Handler,
		},
		{
			MethodName: "get_country_by_id",
			Handler:    _QreeketGatewayService_GetCountryById_Handler,
		},
		{
			MethodName: "add_country",
			Handler:    _QreeketGatewayService_AddCountry_Handler,
		},
		{
			MethodName: "delete_country",
			Handler:    _QreeketGatewayService_DeleteCountry_Handler,
		},
		{
			MethodName: "get_colleges_for_country",
			Handler:    _QreeketGatewayService_GetCollegesForCountry_Handler,
		},
		{
			MethodName: "get_college_by_id",
			Handler:    _QreeketGatewayService_GetCollegeById_Handler,
		},
		{
			MethodName: "add_college",
			Handler:    _QreeketGatewayService_AddCollege_Handler,
		},
		{
			MethodName: "delete_college",
			Handler:    _QreeketGatewayService_DeleteCollege_Handler,
		},
		{
			MethodName: "charge",
			Handler:    _QreeketGatewayService_Charge_Handler,
		},
		{
			MethodName: "get_transaction",
			Handler:    _QreeketGatewayService_GetTransaction_Handler,
		},
		{
			MethodName: "list_transactions",
			Handler:    _QreeketGatewayService_ListTransactions_Handler,
		},
		{
			MethodName: "delete_transaction",
			Handler:    _QreeketGatewayService_DeleteTransaction_Handler,
		},
		{
			MethodName: "createChannel",
			Handler:    _QreeketGatewayService_CreateChannel_Handler,
		},
		{
			MethodName: "getChannel",
			Handler:    _QreeketGatewayService_GetChannel_Handler,
		},
		{
			MethodName: "updateChannel",
			Handler:    _QreeketGatewayService_UpdateChannel_Handler,
		},
		{
			MethodName: "deleteChannel",
			Handler:    _QreeketGatewayService_DeleteChannel_Handler,
		},
		{
			MethodName: "leaveChannel",
			Handler:    _QreeketGatewayService_LeaveChannel_Handler,
		},
		{
			MethodName: "subscribeToChannel",
			Handler:    _QreeketGatewayService_SubscribeToChannel_Handler,
		},
		{
			MethodName: "unsubscribeFromChannel",
			Handler:    _QreeketGatewayService_UnsubscribeFromChannel_Handler,
		},
		{
			MethodName: "manageChannelSubscription",
			Handler:    _QreeketGatewayService_ManageChannelSubscription_Handler,
		},
		{
			MethodName: "muteChannel",
			Handler:    _QreeketGatewayService_MuteChannel_Handler,
		},
		{
			MethodName: "unmuteChannel",
			Handler:    _QreeketGatewayService_UnmuteChannel_Handler,
		},
		{
			MethodName: "createGroup",
			Handler:    _QreeketGatewayService_CreateGroup_Handler,
		},
		{
			MethodName: "getGroup",
			Handler:    _QreeketGatewayService_GetGroup_Handler,
		},
		{
			MethodName: "updateGroup",
			Handler:    _QreeketGatewayService_UpdateGroup_Handler,
		},
		{
			MethodName: "deleteGroup",
			Handler:    _QreeketGatewayService_DeleteGroup_Handler,
		},
		{
			MethodName: "leaveGroup",
			Handler:    _QreeketGatewayService_LeaveGroup_Handler,
		},
		{
			MethodName: "inviteToGroup",
			Handler:    _QreeketGatewayService_InviteToGroup_Handler,
		},
		{
			MethodName: "revokeGroupInvite",
			Handler:    _QreeketGatewayService_RevokeGroupInvite_Handler,
		},
		{
			MethodName: "manageGroupInvite",
			Handler:    _QreeketGatewayService_ManageGroupInvite_Handler,
		},
		{
			MethodName: "muteGroup",
			Handler:    _QreeketGatewayService_MuteGroup_Handler,
		},
		{
			MethodName: "unmuteGroup",
			Handler:    _QreeketGatewayService_UnmuteGroup_Handler,
		},
		{
			MethodName: "promoteGroupAdmin",
			Handler:    _QreeketGatewayService_PromoteGroupAdmin_Handler,
		},
		{
			MethodName: "demoteGroupAdmin",
			Handler:    _QreeketGatewayService_DemoteGroupAdmin_Handler,
		},
		{
			MethodName: "banFromGroup",
			Handler:    _QreeketGatewayService_BanFromGroup_Handler,
		},
		{
			MethodName: "unbanFromGroup",
			Handler:    _QreeketGatewayService_UnbanFromGroup_Handler,
		},
		{
			MethodName: "upload_media",
			Handler:    _QreeketGatewayService_UploadMedia_Handler,
		},
		{
			MethodName: "get_media",
			Handler:    _QreeketGatewayService_GetMedia_Handler,
		},
		{
			MethodName: "delete_media",
			Handler:    _QreeketGatewayService_DeleteMedia_Handler,
		},
		{
			MethodName: "sendMessage",
			Handler:    _QreeketGatewayService_SendMessage_Handler,
		},
		{
			MethodName: "deleteMessage",
			Handler:    _QreeketGatewayService_DeleteMessage_Handler,
		},
		{
			MethodName: "editMessage",
			Handler:    _QreeketGatewayService_EditMessage_Handler,
		},
		{
			MethodName: "reactToMessage",
			Handler:    _QreeketGatewayService_ReactToMessage_Handler,
		},
		{
			MethodName: "createThread",
			Handler:    _QreeketGatewayService_CreateThread_Handler,
		},
		{
			MethodName: "deleteThread",
			Handler:    _QreeketGatewayService_DeleteThread_Handler,
		},
		{
			MethodName: "editThread",
			Handler:    _QreeketGatewayService_EditThread_Handler,
		},
		{
			MethodName: "reactToThread",
			Handler:    _QreeketGatewayService_ReactToThread_Handler,
		},
		{
			MethodName: "addDirectMessenger",
			Handler:    _QreeketGatewayService_AddDirectMessenger_Handler,
		},
		{
			MethodName: "removeDirectMessenger",
			Handler:    _QreeketGatewayService_RemoveDirectMessenger_Handler,
		},
		{
			MethodName: "send_phone_verification_code",
			Handler:    _QreeketGatewayService_SendPhoneVerificationCode_Handler,
		},
		{
			MethodName: "verify_phone_verification_code",
			Handler:    _QreeketGatewayService_VerifyPhoneVerificationCode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAnnouncements",
			Handler:       _QreeketGatewayService_GetAnnouncements_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getChannelsForGroup",
			Handler:       _QreeketGatewayService_GetChannelsForGroup_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getChannelSubscriptionsForUser",
			Handler:       _QreeketGatewayService_GetChannelSubscriptionsForUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getGroups",
			Handler:       _QreeketGatewayService_GetGroups_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getGroupInvitesForUser",
			Handler:       _QreeketGatewayService_GetGroupInvitesForUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getGroupInvitesForGroup",
			Handler:       _QreeketGatewayService_GetGroupInvitesForGroup_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "upload_large_media",
			Handler:       _QreeketGatewayService_UploadLargeMedia_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "getMessages",
			Handler:       _QreeketGatewayService_GetMessages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getThreads",
			Handler:       _QreeketGatewayService_GetThreads_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getDirectMessengers",
			Handler:       _QreeketGatewayService_GetDirectMessengers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getDirectMessages",
			Handler:       _QreeketGatewayService_GetDirectMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gateway.proto",
}
