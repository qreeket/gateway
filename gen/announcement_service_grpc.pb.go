// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: announcement_service.proto

package qreeket

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AnnouncementService_GetAnnouncements_FullMethodName             = "/qreeket.AnnouncementService/GetAnnouncements"
	AnnouncementService_GetAnnouncement_FullMethodName              = "/qreeket.AnnouncementService/GetAnnouncement"
	AnnouncementService_CreateAnnouncement_FullMethodName           = "/qreeket.AnnouncementService/CreateAnnouncement"
	AnnouncementService_UpdateAnnouncement_FullMethodName           = "/qreeket.AnnouncementService/UpdateAnnouncement"
	AnnouncementService_DeleteAnnouncement_FullMethodName           = "/qreeket.AnnouncementService/DeleteAnnouncement"
	AnnouncementService_SubscribeToAnnouncements_FullMethodName     = "/qreeket.AnnouncementService/SubscribeToAnnouncements"
	AnnouncementService_UnsubscribeFromAnnouncements_FullMethodName = "/qreeket.AnnouncementService/UnsubscribeFromAnnouncements"
)

// AnnouncementServiceClient is the client API for AnnouncementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnnouncementServiceClient interface {
	// CRUD operations for Announcements
	GetAnnouncements(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (AnnouncementService_GetAnnouncementsClient, error)
	GetAnnouncement(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Announcement, error)
	CreateAnnouncement(ctx context.Context, in *CreateAnnouncementRequest, opts ...grpc.CallOption) (*Announcement, error)
	UpdateAnnouncement(ctx context.Context, in *UpdateAnnouncementRequest, opts ...grpc.CallOption) (*Announcement, error)
	DeleteAnnouncement(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Subscribe to Announcements
	SubscribeToAnnouncements(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnsubscribeFromAnnouncements(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type announcementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnnouncementServiceClient(cc grpc.ClientConnInterface) AnnouncementServiceClient {
	return &announcementServiceClient{cc}
}

func (c *announcementServiceClient) GetAnnouncements(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (AnnouncementService_GetAnnouncementsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AnnouncementService_ServiceDesc.Streams[0], AnnouncementService_GetAnnouncements_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &announcementServiceGetAnnouncementsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AnnouncementService_GetAnnouncementsClient interface {
	Recv() (*AnnouncementsList, error)
	grpc.ClientStream
}

type announcementServiceGetAnnouncementsClient struct {
	grpc.ClientStream
}

func (x *announcementServiceGetAnnouncementsClient) Recv() (*AnnouncementsList, error) {
	m := new(AnnouncementsList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *announcementServiceClient) GetAnnouncement(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Announcement, error) {
	out := new(Announcement)
	err := c.cc.Invoke(ctx, AnnouncementService_GetAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announcementServiceClient) CreateAnnouncement(ctx context.Context, in *CreateAnnouncementRequest, opts ...grpc.CallOption) (*Announcement, error) {
	out := new(Announcement)
	err := c.cc.Invoke(ctx, AnnouncementService_CreateAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announcementServiceClient) UpdateAnnouncement(ctx context.Context, in *UpdateAnnouncementRequest, opts ...grpc.CallOption) (*Announcement, error) {
	out := new(Announcement)
	err := c.cc.Invoke(ctx, AnnouncementService_UpdateAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announcementServiceClient) DeleteAnnouncement(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AnnouncementService_DeleteAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announcementServiceClient) SubscribeToAnnouncements(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AnnouncementService_SubscribeToAnnouncements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announcementServiceClient) UnsubscribeFromAnnouncements(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AnnouncementService_UnsubscribeFromAnnouncements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnnouncementServiceServer is the server API for AnnouncementService service.
// All implementations must embed UnimplementedAnnouncementServiceServer
// for forward compatibility
type AnnouncementServiceServer interface {
	// CRUD operations for Announcements
	GetAnnouncements(*emptypb.Empty, AnnouncementService_GetAnnouncementsServer) error
	GetAnnouncement(context.Context, *wrapperspb.StringValue) (*Announcement, error)
	CreateAnnouncement(context.Context, *CreateAnnouncementRequest) (*Announcement, error)
	UpdateAnnouncement(context.Context, *UpdateAnnouncementRequest) (*Announcement, error)
	DeleteAnnouncement(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// Subscribe to Announcements
	SubscribeToAnnouncements(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	UnsubscribeFromAnnouncements(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	mustEmbedUnimplementedAnnouncementServiceServer()
}

// UnimplementedAnnouncementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnnouncementServiceServer struct {
}

func (UnimplementedAnnouncementServiceServer) GetAnnouncements(*emptypb.Empty, AnnouncementService_GetAnnouncementsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAnnouncements not implemented")
}
func (UnimplementedAnnouncementServiceServer) GetAnnouncement(context.Context, *wrapperspb.StringValue) (*Announcement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnouncement not implemented")
}
func (UnimplementedAnnouncementServiceServer) CreateAnnouncement(context.Context, *CreateAnnouncementRequest) (*Announcement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnnouncement not implemented")
}
func (UnimplementedAnnouncementServiceServer) UpdateAnnouncement(context.Context, *UpdateAnnouncementRequest) (*Announcement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnnouncement not implemented")
}
func (UnimplementedAnnouncementServiceServer) DeleteAnnouncement(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnnouncement not implemented")
}
func (UnimplementedAnnouncementServiceServer) SubscribeToAnnouncements(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeToAnnouncements not implemented")
}
func (UnimplementedAnnouncementServiceServer) UnsubscribeFromAnnouncements(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeFromAnnouncements not implemented")
}
func (UnimplementedAnnouncementServiceServer) mustEmbedUnimplementedAnnouncementServiceServer() {}

// UnsafeAnnouncementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnnouncementServiceServer will
// result in compilation errors.
type UnsafeAnnouncementServiceServer interface {
	mustEmbedUnimplementedAnnouncementServiceServer()
}

func RegisterAnnouncementServiceServer(s grpc.ServiceRegistrar, srv AnnouncementServiceServer) {
	s.RegisterService(&AnnouncementService_ServiceDesc, srv)
}

func _AnnouncementService_GetAnnouncements_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnnouncementServiceServer).GetAnnouncements(m, &announcementServiceGetAnnouncementsServer{stream})
}

type AnnouncementService_GetAnnouncementsServer interface {
	Send(*AnnouncementsList) error
	grpc.ServerStream
}

type announcementServiceGetAnnouncementsServer struct {
	grpc.ServerStream
}

func (x *announcementServiceGetAnnouncementsServer) Send(m *AnnouncementsList) error {
	return x.ServerStream.SendMsg(m)
}

func _AnnouncementService_GetAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementServiceServer).GetAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnnouncementService_GetAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementServiceServer).GetAnnouncement(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnnouncementService_CreateAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementServiceServer).CreateAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnnouncementService_CreateAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementServiceServer).CreateAnnouncement(ctx, req.(*CreateAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnnouncementService_UpdateAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementServiceServer).UpdateAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnnouncementService_UpdateAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementServiceServer).UpdateAnnouncement(ctx, req.(*UpdateAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnnouncementService_DeleteAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementServiceServer).DeleteAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnnouncementService_DeleteAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementServiceServer).DeleteAnnouncement(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnnouncementService_SubscribeToAnnouncements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementServiceServer).SubscribeToAnnouncements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnnouncementService_SubscribeToAnnouncements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementServiceServer).SubscribeToAnnouncements(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnnouncementService_UnsubscribeFromAnnouncements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementServiceServer).UnsubscribeFromAnnouncements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnnouncementService_UnsubscribeFromAnnouncements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementServiceServer).UnsubscribeFromAnnouncements(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// AnnouncementService_ServiceDesc is the grpc.ServiceDesc for AnnouncementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnnouncementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qreeket.AnnouncementService",
	HandlerType: (*AnnouncementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAnnouncement",
			Handler:    _AnnouncementService_GetAnnouncement_Handler,
		},
		{
			MethodName: "CreateAnnouncement",
			Handler:    _AnnouncementService_CreateAnnouncement_Handler,
		},
		{
			MethodName: "UpdateAnnouncement",
			Handler:    _AnnouncementService_UpdateAnnouncement_Handler,
		},
		{
			MethodName: "DeleteAnnouncement",
			Handler:    _AnnouncementService_DeleteAnnouncement_Handler,
		},
		{
			MethodName: "SubscribeToAnnouncements",
			Handler:    _AnnouncementService_SubscribeToAnnouncements_Handler,
		},
		{
			MethodName: "UnsubscribeFromAnnouncements",
			Handler:    _AnnouncementService_UnsubscribeFromAnnouncements_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAnnouncements",
			Handler:       _AnnouncementService_GetAnnouncements_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "announcement_service.proto",
}
