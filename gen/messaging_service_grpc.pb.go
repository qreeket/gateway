// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: messaging_service.proto

package qreeket

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MessagingService_SendMessage_FullMethodName           = "/qreeket.MessagingService/sendMessage"
	MessagingService_DeleteMessage_FullMethodName         = "/qreeket.MessagingService/deleteMessage"
	MessagingService_GetMessages_FullMethodName           = "/qreeket.MessagingService/getMessages"
	MessagingService_EditMessage_FullMethodName           = "/qreeket.MessagingService/editMessage"
	MessagingService_ReactToMessage_FullMethodName        = "/qreeket.MessagingService/reactToMessage"
	MessagingService_CreateThread_FullMethodName          = "/qreeket.MessagingService/createThread"
	MessagingService_DeleteThread_FullMethodName          = "/qreeket.MessagingService/deleteThread"
	MessagingService_GetThreads_FullMethodName            = "/qreeket.MessagingService/getThreads"
	MessagingService_EditThread_FullMethodName            = "/qreeket.MessagingService/editThread"
	MessagingService_ReactToThread_FullMethodName         = "/qreeket.MessagingService/reactToThread"
	MessagingService_GetDirectMessengers_FullMethodName   = "/qreeket.MessagingService/getDirectMessengers"
	MessagingService_GetDirectMessages_FullMethodName     = "/qreeket.MessagingService/getDirectMessages"
	MessagingService_AddDirectMessenger_FullMethodName    = "/qreeket.MessagingService/addDirectMessenger"
	MessagingService_RemoveDirectMessenger_FullMethodName = "/qreeket.MessagingService/removeDirectMessenger"
)

// MessagingServiceClient is the client API for MessagingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessagingServiceClient interface {
	SendMessage(ctx context.Context, in *MessageListItem, opts ...grpc.CallOption) (*MessageListItem, error)
	DeleteMessage(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (MessagingService_GetMessagesClient, error)
	EditMessage(ctx context.Context, in *MessageListItem, opts ...grpc.CallOption) (*MessageListItem, error)
	ReactToMessage(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*MessageListItem, error)
	CreateThread(ctx context.Context, in *MessageListItem, opts ...grpc.CallOption) (*MessageListItem, error)
	DeleteThread(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetThreads(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (MessagingService_GetThreadsClient, error)
	EditThread(ctx context.Context, in *MessageListItem, opts ...grpc.CallOption) (*MessageListItem, error)
	ReactToThread(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*MessageListItem, error)
	GetDirectMessengers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (MessagingService_GetDirectMessengersClient, error)
	GetDirectMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (MessagingService_GetDirectMessagesClient, error)
	AddDirectMessenger(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*DirectMessenger, error)
	RemoveDirectMessenger(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type messagingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagingServiceClient(cc grpc.ClientConnInterface) MessagingServiceClient {
	return &messagingServiceClient{cc}
}

func (c *messagingServiceClient) SendMessage(ctx context.Context, in *MessageListItem, opts ...grpc.CallOption) (*MessageListItem, error) {
	out := new(MessageListItem)
	err := c.cc.Invoke(ctx, MessagingService_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) DeleteMessage(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MessagingService_DeleteMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (MessagingService_GetMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessagingService_ServiceDesc.Streams[0], MessagingService_GetMessages_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messagingServiceGetMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagingService_GetMessagesClient interface {
	Recv() (*MessageList, error)
	grpc.ClientStream
}

type messagingServiceGetMessagesClient struct {
	grpc.ClientStream
}

func (x *messagingServiceGetMessagesClient) Recv() (*MessageList, error) {
	m := new(MessageList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagingServiceClient) EditMessage(ctx context.Context, in *MessageListItem, opts ...grpc.CallOption) (*MessageListItem, error) {
	out := new(MessageListItem)
	err := c.cc.Invoke(ctx, MessagingService_EditMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) ReactToMessage(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*MessageListItem, error) {
	out := new(MessageListItem)
	err := c.cc.Invoke(ctx, MessagingService_ReactToMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) CreateThread(ctx context.Context, in *MessageListItem, opts ...grpc.CallOption) (*MessageListItem, error) {
	out := new(MessageListItem)
	err := c.cc.Invoke(ctx, MessagingService_CreateThread_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) DeleteThread(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MessagingService_DeleteThread_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) GetThreads(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (MessagingService_GetThreadsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessagingService_ServiceDesc.Streams[1], MessagingService_GetThreads_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messagingServiceGetThreadsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagingService_GetThreadsClient interface {
	Recv() (*MessageList, error)
	grpc.ClientStream
}

type messagingServiceGetThreadsClient struct {
	grpc.ClientStream
}

func (x *messagingServiceGetThreadsClient) Recv() (*MessageList, error) {
	m := new(MessageList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagingServiceClient) EditThread(ctx context.Context, in *MessageListItem, opts ...grpc.CallOption) (*MessageListItem, error) {
	out := new(MessageListItem)
	err := c.cc.Invoke(ctx, MessagingService_EditThread_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) ReactToThread(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*MessageListItem, error) {
	out := new(MessageListItem)
	err := c.cc.Invoke(ctx, MessagingService_ReactToThread_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) GetDirectMessengers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (MessagingService_GetDirectMessengersClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessagingService_ServiceDesc.Streams[2], MessagingService_GetDirectMessengers_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messagingServiceGetDirectMessengersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagingService_GetDirectMessengersClient interface {
	Recv() (*DirectMessengerList, error)
	grpc.ClientStream
}

type messagingServiceGetDirectMessengersClient struct {
	grpc.ClientStream
}

func (x *messagingServiceGetDirectMessengersClient) Recv() (*DirectMessengerList, error) {
	m := new(DirectMessengerList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagingServiceClient) GetDirectMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (MessagingService_GetDirectMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessagingService_ServiceDesc.Streams[3], MessagingService_GetDirectMessages_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messagingServiceGetDirectMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagingService_GetDirectMessagesClient interface {
	Recv() (*MessageList, error)
	grpc.ClientStream
}

type messagingServiceGetDirectMessagesClient struct {
	grpc.ClientStream
}

func (x *messagingServiceGetDirectMessagesClient) Recv() (*MessageList, error) {
	m := new(MessageList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagingServiceClient) AddDirectMessenger(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*DirectMessenger, error) {
	out := new(DirectMessenger)
	err := c.cc.Invoke(ctx, MessagingService_AddDirectMessenger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) RemoveDirectMessenger(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MessagingService_RemoveDirectMessenger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessagingServiceServer is the server API for MessagingService service.
// All implementations must embed UnimplementedMessagingServiceServer
// for forward compatibility
type MessagingServiceServer interface {
	SendMessage(context.Context, *MessageListItem) (*MessageListItem, error)
	DeleteMessage(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	GetMessages(*GetMessagesRequest, MessagingService_GetMessagesServer) error
	EditMessage(context.Context, *MessageListItem) (*MessageListItem, error)
	ReactToMessage(context.Context, *wrapperspb.StringValue) (*MessageListItem, error)
	CreateThread(context.Context, *MessageListItem) (*MessageListItem, error)
	DeleteThread(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	GetThreads(*GetMessagesRequest, MessagingService_GetThreadsServer) error
	EditThread(context.Context, *MessageListItem) (*MessageListItem, error)
	ReactToThread(context.Context, *wrapperspb.StringValue) (*MessageListItem, error)
	GetDirectMessengers(*emptypb.Empty, MessagingService_GetDirectMessengersServer) error
	GetDirectMessages(*GetMessagesRequest, MessagingService_GetDirectMessagesServer) error
	AddDirectMessenger(context.Context, *wrapperspb.StringValue) (*DirectMessenger, error)
	RemoveDirectMessenger(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	mustEmbedUnimplementedMessagingServiceServer()
}

// UnimplementedMessagingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessagingServiceServer struct {
}

func (UnimplementedMessagingServiceServer) SendMessage(context.Context, *MessageListItem) (*MessageListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMessagingServiceServer) DeleteMessage(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedMessagingServiceServer) GetMessages(*GetMessagesRequest, MessagingService_GetMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedMessagingServiceServer) EditMessage(context.Context, *MessageListItem) (*MessageListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMessage not implemented")
}
func (UnimplementedMessagingServiceServer) ReactToMessage(context.Context, *wrapperspb.StringValue) (*MessageListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactToMessage not implemented")
}
func (UnimplementedMessagingServiceServer) CreateThread(context.Context, *MessageListItem) (*MessageListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThread not implemented")
}
func (UnimplementedMessagingServiceServer) DeleteThread(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteThread not implemented")
}
func (UnimplementedMessagingServiceServer) GetThreads(*GetMessagesRequest, MessagingService_GetThreadsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetThreads not implemented")
}
func (UnimplementedMessagingServiceServer) EditThread(context.Context, *MessageListItem) (*MessageListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditThread not implemented")
}
func (UnimplementedMessagingServiceServer) ReactToThread(context.Context, *wrapperspb.StringValue) (*MessageListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactToThread not implemented")
}
func (UnimplementedMessagingServiceServer) GetDirectMessengers(*emptypb.Empty, MessagingService_GetDirectMessengersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDirectMessengers not implemented")
}
func (UnimplementedMessagingServiceServer) GetDirectMessages(*GetMessagesRequest, MessagingService_GetDirectMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDirectMessages not implemented")
}
func (UnimplementedMessagingServiceServer) AddDirectMessenger(context.Context, *wrapperspb.StringValue) (*DirectMessenger, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDirectMessenger not implemented")
}
func (UnimplementedMessagingServiceServer) RemoveDirectMessenger(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDirectMessenger not implemented")
}
func (UnimplementedMessagingServiceServer) mustEmbedUnimplementedMessagingServiceServer() {}

// UnsafeMessagingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessagingServiceServer will
// result in compilation errors.
type UnsafeMessagingServiceServer interface {
	mustEmbedUnimplementedMessagingServiceServer()
}

func RegisterMessagingServiceServer(s grpc.ServiceRegistrar, srv MessagingServiceServer) {
	s.RegisterService(&MessagingService_ServiceDesc, srv)
}

func _MessagingService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageListItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).SendMessage(ctx, req.(*MessageListItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).DeleteMessage(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_GetMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagingServiceServer).GetMessages(m, &messagingServiceGetMessagesServer{stream})
}

type MessagingService_GetMessagesServer interface {
	Send(*MessageList) error
	grpc.ServerStream
}

type messagingServiceGetMessagesServer struct {
	grpc.ServerStream
}

func (x *messagingServiceGetMessagesServer) Send(m *MessageList) error {
	return x.ServerStream.SendMsg(m)
}

func _MessagingService_EditMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageListItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).EditMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_EditMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).EditMessage(ctx, req.(*MessageListItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_ReactToMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).ReactToMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_ReactToMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).ReactToMessage(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_CreateThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageListItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).CreateThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_CreateThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).CreateThread(ctx, req.(*MessageListItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_DeleteThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).DeleteThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_DeleteThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).DeleteThread(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_GetThreads_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagingServiceServer).GetThreads(m, &messagingServiceGetThreadsServer{stream})
}

type MessagingService_GetThreadsServer interface {
	Send(*MessageList) error
	grpc.ServerStream
}

type messagingServiceGetThreadsServer struct {
	grpc.ServerStream
}

func (x *messagingServiceGetThreadsServer) Send(m *MessageList) error {
	return x.ServerStream.SendMsg(m)
}

func _MessagingService_EditThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageListItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).EditThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_EditThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).EditThread(ctx, req.(*MessageListItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_ReactToThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).ReactToThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_ReactToThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).ReactToThread(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_GetDirectMessengers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagingServiceServer).GetDirectMessengers(m, &messagingServiceGetDirectMessengersServer{stream})
}

type MessagingService_GetDirectMessengersServer interface {
	Send(*DirectMessengerList) error
	grpc.ServerStream
}

type messagingServiceGetDirectMessengersServer struct {
	grpc.ServerStream
}

func (x *messagingServiceGetDirectMessengersServer) Send(m *DirectMessengerList) error {
	return x.ServerStream.SendMsg(m)
}

func _MessagingService_GetDirectMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagingServiceServer).GetDirectMessages(m, &messagingServiceGetDirectMessagesServer{stream})
}

type MessagingService_GetDirectMessagesServer interface {
	Send(*MessageList) error
	grpc.ServerStream
}

type messagingServiceGetDirectMessagesServer struct {
	grpc.ServerStream
}

func (x *messagingServiceGetDirectMessagesServer) Send(m *MessageList) error {
	return x.ServerStream.SendMsg(m)
}

func _MessagingService_AddDirectMessenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).AddDirectMessenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_AddDirectMessenger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).AddDirectMessenger(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_RemoveDirectMessenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).RemoveDirectMessenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_RemoveDirectMessenger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).RemoveDirectMessenger(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// MessagingService_ServiceDesc is the grpc.ServiceDesc for MessagingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessagingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qreeket.MessagingService",
	HandlerType: (*MessagingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendMessage",
			Handler:    _MessagingService_SendMessage_Handler,
		},
		{
			MethodName: "deleteMessage",
			Handler:    _MessagingService_DeleteMessage_Handler,
		},
		{
			MethodName: "editMessage",
			Handler:    _MessagingService_EditMessage_Handler,
		},
		{
			MethodName: "reactToMessage",
			Handler:    _MessagingService_ReactToMessage_Handler,
		},
		{
			MethodName: "createThread",
			Handler:    _MessagingService_CreateThread_Handler,
		},
		{
			MethodName: "deleteThread",
			Handler:    _MessagingService_DeleteThread_Handler,
		},
		{
			MethodName: "editThread",
			Handler:    _MessagingService_EditThread_Handler,
		},
		{
			MethodName: "reactToThread",
			Handler:    _MessagingService_ReactToThread_Handler,
		},
		{
			MethodName: "addDirectMessenger",
			Handler:    _MessagingService_AddDirectMessenger_Handler,
		},
		{
			MethodName: "removeDirectMessenger",
			Handler:    _MessagingService_RemoveDirectMessenger_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getMessages",
			Handler:       _MessagingService_GetMessages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getThreads",
			Handler:       _MessagingService_GetThreads_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getDirectMessengers",
			Handler:       _MessagingService_GetDirectMessengers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getDirectMessages",
			Handler:       _MessagingService_GetDirectMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "messaging_service.proto",
}
