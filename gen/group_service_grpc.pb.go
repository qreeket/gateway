// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: group_service.proto

package qreeket

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GroupChannelService_CreateChannel_FullMethodName                  = "/qreeket.GroupChannelService/createChannel"
	GroupChannelService_GetChannel_FullMethodName                     = "/qreeket.GroupChannelService/getChannel"
	GroupChannelService_GetChannelsForGroup_FullMethodName            = "/qreeket.GroupChannelService/getChannelsForGroup"
	GroupChannelService_UpdateChannel_FullMethodName                  = "/qreeket.GroupChannelService/updateChannel"
	GroupChannelService_DeleteChannel_FullMethodName                  = "/qreeket.GroupChannelService/deleteChannel"
	GroupChannelService_LeaveChannel_FullMethodName                   = "/qreeket.GroupChannelService/leaveChannel"
	GroupChannelService_SubscribeToChannel_FullMethodName             = "/qreeket.GroupChannelService/subscribeToChannel"
	GroupChannelService_UnsubscribeFromChannel_FullMethodName         = "/qreeket.GroupChannelService/unsubscribeFromChannel"
	GroupChannelService_ManageChannelSubscription_FullMethodName      = "/qreeket.GroupChannelService/manageChannelSubscription"
	GroupChannelService_GetChannelSubscriptionsForUser_FullMethodName = "/qreeket.GroupChannelService/getChannelSubscriptionsForUser"
	GroupChannelService_MuteChannel_FullMethodName                    = "/qreeket.GroupChannelService/muteChannel"
	GroupChannelService_UnmuteChannel_FullMethodName                  = "/qreeket.GroupChannelService/unmuteChannel"
	GroupChannelService_CreateGroup_FullMethodName                    = "/qreeket.GroupChannelService/createGroup"
	GroupChannelService_GetGroup_FullMethodName                       = "/qreeket.GroupChannelService/getGroup"
	GroupChannelService_GetGroups_FullMethodName                      = "/qreeket.GroupChannelService/getGroups"
	GroupChannelService_UpdateGroup_FullMethodName                    = "/qreeket.GroupChannelService/updateGroup"
	GroupChannelService_DeleteGroup_FullMethodName                    = "/qreeket.GroupChannelService/deleteGroup"
	GroupChannelService_LeaveGroup_FullMethodName                     = "/qreeket.GroupChannelService/leaveGroup"
	GroupChannelService_InviteToGroup_FullMethodName                  = "/qreeket.GroupChannelService/inviteToGroup"
	GroupChannelService_GetGroupInvitesForUser_FullMethodName         = "/qreeket.GroupChannelService/getGroupInvitesForUser"
	GroupChannelService_GetGroupInvitesForGroup_FullMethodName        = "/qreeket.GroupChannelService/getGroupInvitesForGroup"
	GroupChannelService_RevokeGroupInvite_FullMethodName              = "/qreeket.GroupChannelService/revokeGroupInvite"
	GroupChannelService_ManageGroupInvite_FullMethodName              = "/qreeket.GroupChannelService/manageGroupInvite"
	GroupChannelService_MuteGroup_FullMethodName                      = "/qreeket.GroupChannelService/muteGroup"
	GroupChannelService_UnmuteGroup_FullMethodName                    = "/qreeket.GroupChannelService/unmuteGroup"
	GroupChannelService_PromoteGroupAdmin_FullMethodName              = "/qreeket.GroupChannelService/promoteGroupAdmin"
	GroupChannelService_DemoteGroupAdmin_FullMethodName               = "/qreeket.GroupChannelService/demoteGroupAdmin"
	GroupChannelService_BanFromGroup_FullMethodName                   = "/qreeket.GroupChannelService/banFromGroup"
	GroupChannelService_UnbanFromGroup_FullMethodName                 = "/qreeket.GroupChannelService/unbanFromGroup"
)

// GroupChannelServiceClient is the client API for GroupChannelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupChannelServiceClient interface {
	// region channels
	CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*Channel, error)
	GetChannel(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Channel, error)
	GetChannelsForGroup(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (GroupChannelService_GetChannelsForGroupClient, error)
	UpdateChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Channel, error)
	DeleteChannel(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LeaveChannel(ctx context.Context, in *ManageGroupOrChannel, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// user can only subscribe to / unsubscribe from public channels
	SubscribeToChannel(ctx context.Context, in *ChannelSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnsubscribeFromChannel(ctx context.Context, in *ChannelSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ManageChannelSubscription(ctx context.Context, in *ManageChannelSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetChannelSubscriptionsForUser(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (GroupChannelService_GetChannelSubscriptionsForUserClient, error)
	// all users can mute / unmute channels
	MuteChannel(ctx context.Context, in *ManageGroupOrChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnmuteChannel(ctx context.Context, in *ManageGroupOrChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// region groups
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*Group, error)
	GetGroup(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Group, error)
	// all groups a user is a member/admin of
	GetGroups(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (GroupChannelService_GetGroupsClient, error)
	UpdateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LeaveGroup(ctx context.Context, in *ManageGroupOrChannel, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// admins can invite users to groups
	InviteToGroup(ctx context.Context, in *GroupInviteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// get all group invites for a user
	GetGroupInvitesForUser(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (GroupChannelService_GetGroupInvitesForUserClient, error)
	// get all group invites for a group
	GetGroupInvitesForGroup(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (GroupChannelService_GetGroupInvitesForGroupClient, error)
	// revoke a channel invite (only admins can revoke invites)
	RevokeGroupInvite(ctx context.Context, in *RevokeGroupInviteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// accept / decline a group invite
	ManageGroupInvite(ctx context.Context, in *ManageGroupInviteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// users can mute / unmute groups
	MuteGroup(ctx context.Context, in *ManageGroupOrChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnmuteGroup(ctx context.Context, in *ManageGroupOrChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// promote / demote group admins (only group admins can promote / demote new admins)
	PromoteGroupAdmin(ctx context.Context, in *ManageAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DemoteGroupAdmin(ctx context.Context, in *ManageAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// admins can ban / unban users from groups
	BanFromGroup(ctx context.Context, in *ManageGroupOrChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnbanFromGroup(ctx context.Context, in *ManageGroupOrChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type groupChannelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupChannelServiceClient(cc grpc.ClientConnInterface) GroupChannelServiceClient {
	return &groupChannelServiceClient{cc}
}

func (c *groupChannelServiceClient) CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*Channel, error) {
	out := new(Channel)
	err := c.cc.Invoke(ctx, GroupChannelService_CreateChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChannelServiceClient) GetChannel(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Channel, error) {
	out := new(Channel)
	err := c.cc.Invoke(ctx, GroupChannelService_GetChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChannelServiceClient) GetChannelsForGroup(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (GroupChannelService_GetChannelsForGroupClient, error) {
	stream, err := c.cc.NewStream(ctx, &GroupChannelService_ServiceDesc.Streams[0], GroupChannelService_GetChannelsForGroup_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &groupChannelServiceGetChannelsForGroupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GroupChannelService_GetChannelsForGroupClient interface {
	Recv() (*ChannelList, error)
	grpc.ClientStream
}

type groupChannelServiceGetChannelsForGroupClient struct {
	grpc.ClientStream
}

func (x *groupChannelServiceGetChannelsForGroupClient) Recv() (*ChannelList, error) {
	m := new(ChannelList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *groupChannelServiceClient) UpdateChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Channel, error) {
	out := new(Channel)
	err := c.cc.Invoke(ctx, GroupChannelService_UpdateChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChannelServiceClient) DeleteChannel(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupChannelService_DeleteChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChannelServiceClient) LeaveChannel(ctx context.Context, in *ManageGroupOrChannel, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupChannelService_LeaveChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChannelServiceClient) SubscribeToChannel(ctx context.Context, in *ChannelSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupChannelService_SubscribeToChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChannelServiceClient) UnsubscribeFromChannel(ctx context.Context, in *ChannelSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupChannelService_UnsubscribeFromChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChannelServiceClient) ManageChannelSubscription(ctx context.Context, in *ManageChannelSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupChannelService_ManageChannelSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChannelServiceClient) GetChannelSubscriptionsForUser(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (GroupChannelService_GetChannelSubscriptionsForUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &GroupChannelService_ServiceDesc.Streams[1], GroupChannelService_GetChannelSubscriptionsForUser_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &groupChannelServiceGetChannelSubscriptionsForUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GroupChannelService_GetChannelSubscriptionsForUserClient interface {
	Recv() (*ChannelSubscriptionList, error)
	grpc.ClientStream
}

type groupChannelServiceGetChannelSubscriptionsForUserClient struct {
	grpc.ClientStream
}

func (x *groupChannelServiceGetChannelSubscriptionsForUserClient) Recv() (*ChannelSubscriptionList, error) {
	m := new(ChannelSubscriptionList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *groupChannelServiceClient) MuteChannel(ctx context.Context, in *ManageGroupOrChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupChannelService_MuteChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChannelServiceClient) UnmuteChannel(ctx context.Context, in *ManageGroupOrChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupChannelService_UnmuteChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChannelServiceClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, GroupChannelService_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChannelServiceClient) GetGroup(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, GroupChannelService_GetGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChannelServiceClient) GetGroups(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (GroupChannelService_GetGroupsClient, error) {
	stream, err := c.cc.NewStream(ctx, &GroupChannelService_ServiceDesc.Streams[2], GroupChannelService_GetGroups_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &groupChannelServiceGetGroupsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GroupChannelService_GetGroupsClient interface {
	Recv() (*GroupList, error)
	grpc.ClientStream
}

type groupChannelServiceGetGroupsClient struct {
	grpc.ClientStream
}

func (x *groupChannelServiceGetGroupsClient) Recv() (*GroupList, error) {
	m := new(GroupList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *groupChannelServiceClient) UpdateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, GroupChannelService_UpdateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChannelServiceClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupChannelService_DeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChannelServiceClient) LeaveGroup(ctx context.Context, in *ManageGroupOrChannel, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupChannelService_LeaveGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChannelServiceClient) InviteToGroup(ctx context.Context, in *GroupInviteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupChannelService_InviteToGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChannelServiceClient) GetGroupInvitesForUser(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (GroupChannelService_GetGroupInvitesForUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &GroupChannelService_ServiceDesc.Streams[3], GroupChannelService_GetGroupInvitesForUser_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &groupChannelServiceGetGroupInvitesForUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GroupChannelService_GetGroupInvitesForUserClient interface {
	Recv() (*GroupInviteList, error)
	grpc.ClientStream
}

type groupChannelServiceGetGroupInvitesForUserClient struct {
	grpc.ClientStream
}

func (x *groupChannelServiceGetGroupInvitesForUserClient) Recv() (*GroupInviteList, error) {
	m := new(GroupInviteList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *groupChannelServiceClient) GetGroupInvitesForGroup(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (GroupChannelService_GetGroupInvitesForGroupClient, error) {
	stream, err := c.cc.NewStream(ctx, &GroupChannelService_ServiceDesc.Streams[4], GroupChannelService_GetGroupInvitesForGroup_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &groupChannelServiceGetGroupInvitesForGroupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GroupChannelService_GetGroupInvitesForGroupClient interface {
	Recv() (*GroupInviteList, error)
	grpc.ClientStream
}

type groupChannelServiceGetGroupInvitesForGroupClient struct {
	grpc.ClientStream
}

func (x *groupChannelServiceGetGroupInvitesForGroupClient) Recv() (*GroupInviteList, error) {
	m := new(GroupInviteList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *groupChannelServiceClient) RevokeGroupInvite(ctx context.Context, in *RevokeGroupInviteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupChannelService_RevokeGroupInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChannelServiceClient) ManageGroupInvite(ctx context.Context, in *ManageGroupInviteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupChannelService_ManageGroupInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChannelServiceClient) MuteGroup(ctx context.Context, in *ManageGroupOrChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupChannelService_MuteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChannelServiceClient) UnmuteGroup(ctx context.Context, in *ManageGroupOrChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupChannelService_UnmuteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChannelServiceClient) PromoteGroupAdmin(ctx context.Context, in *ManageAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupChannelService_PromoteGroupAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChannelServiceClient) DemoteGroupAdmin(ctx context.Context, in *ManageAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupChannelService_DemoteGroupAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChannelServiceClient) BanFromGroup(ctx context.Context, in *ManageGroupOrChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupChannelService_BanFromGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChannelServiceClient) UnbanFromGroup(ctx context.Context, in *ManageGroupOrChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupChannelService_UnbanFromGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupChannelServiceServer is the server API for GroupChannelService service.
// All implementations must embed UnimplementedGroupChannelServiceServer
// for forward compatibility
type GroupChannelServiceServer interface {
	// region channels
	CreateChannel(context.Context, *CreateChannelRequest) (*Channel, error)
	GetChannel(context.Context, *wrapperspb.StringValue) (*Channel, error)
	GetChannelsForGroup(*wrapperspb.StringValue, GroupChannelService_GetChannelsForGroupServer) error
	UpdateChannel(context.Context, *Channel) (*Channel, error)
	DeleteChannel(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	LeaveChannel(context.Context, *ManageGroupOrChannel) (*emptypb.Empty, error)
	// user can only subscribe to / unsubscribe from public channels
	SubscribeToChannel(context.Context, *ChannelSubscriptionRequest) (*emptypb.Empty, error)
	UnsubscribeFromChannel(context.Context, *ChannelSubscriptionRequest) (*emptypb.Empty, error)
	ManageChannelSubscription(context.Context, *ManageChannelSubscriptionRequest) (*emptypb.Empty, error)
	GetChannelSubscriptionsForUser(*wrapperspb.StringValue, GroupChannelService_GetChannelSubscriptionsForUserServer) error
	// all users can mute / unmute channels
	MuteChannel(context.Context, *ManageGroupOrChannelRequest) (*emptypb.Empty, error)
	UnmuteChannel(context.Context, *ManageGroupOrChannelRequest) (*emptypb.Empty, error)
	// region groups
	CreateGroup(context.Context, *CreateGroupRequest) (*Group, error)
	GetGroup(context.Context, *wrapperspb.StringValue) (*Group, error)
	// all groups a user is a member/admin of
	GetGroups(*wrapperspb.StringValue, GroupChannelService_GetGroupsServer) error
	UpdateGroup(context.Context, *Group) (*Group, error)
	DeleteGroup(context.Context, *DeleteGroupRequest) (*emptypb.Empty, error)
	LeaveGroup(context.Context, *ManageGroupOrChannel) (*emptypb.Empty, error)
	// admins can invite users to groups
	InviteToGroup(context.Context, *GroupInviteRequest) (*emptypb.Empty, error)
	// get all group invites for a user
	GetGroupInvitesForUser(*wrapperspb.StringValue, GroupChannelService_GetGroupInvitesForUserServer) error
	// get all group invites for a group
	GetGroupInvitesForGroup(*wrapperspb.StringValue, GroupChannelService_GetGroupInvitesForGroupServer) error
	// revoke a channel invite (only admins can revoke invites)
	RevokeGroupInvite(context.Context, *RevokeGroupInviteRequest) (*emptypb.Empty, error)
	// accept / decline a group invite
	ManageGroupInvite(context.Context, *ManageGroupInviteRequest) (*emptypb.Empty, error)
	// users can mute / unmute groups
	MuteGroup(context.Context, *ManageGroupOrChannelRequest) (*emptypb.Empty, error)
	UnmuteGroup(context.Context, *ManageGroupOrChannelRequest) (*emptypb.Empty, error)
	// promote / demote group admins (only group admins can promote / demote new admins)
	PromoteGroupAdmin(context.Context, *ManageAdminRequest) (*emptypb.Empty, error)
	DemoteGroupAdmin(context.Context, *ManageAdminRequest) (*emptypb.Empty, error)
	// admins can ban / unban users from groups
	BanFromGroup(context.Context, *ManageGroupOrChannelRequest) (*emptypb.Empty, error)
	UnbanFromGroup(context.Context, *ManageGroupOrChannelRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGroupChannelServiceServer()
}

// UnimplementedGroupChannelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGroupChannelServiceServer struct {
}

func (UnimplementedGroupChannelServiceServer) CreateChannel(context.Context, *CreateChannelRequest) (*Channel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedGroupChannelServiceServer) GetChannel(context.Context, *wrapperspb.StringValue) (*Channel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannel not implemented")
}
func (UnimplementedGroupChannelServiceServer) GetChannelsForGroup(*wrapperspb.StringValue, GroupChannelService_GetChannelsForGroupServer) error {
	return status.Errorf(codes.Unimplemented, "method GetChannelsForGroup not implemented")
}
func (UnimplementedGroupChannelServiceServer) UpdateChannel(context.Context, *Channel) (*Channel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannel not implemented")
}
func (UnimplementedGroupChannelServiceServer) DeleteChannel(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedGroupChannelServiceServer) LeaveChannel(context.Context, *ManageGroupOrChannel) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveChannel not implemented")
}
func (UnimplementedGroupChannelServiceServer) SubscribeToChannel(context.Context, *ChannelSubscriptionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeToChannel not implemented")
}
func (UnimplementedGroupChannelServiceServer) UnsubscribeFromChannel(context.Context, *ChannelSubscriptionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeFromChannel not implemented")
}
func (UnimplementedGroupChannelServiceServer) ManageChannelSubscription(context.Context, *ManageChannelSubscriptionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageChannelSubscription not implemented")
}
func (UnimplementedGroupChannelServiceServer) GetChannelSubscriptionsForUser(*wrapperspb.StringValue, GroupChannelService_GetChannelSubscriptionsForUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GetChannelSubscriptionsForUser not implemented")
}
func (UnimplementedGroupChannelServiceServer) MuteChannel(context.Context, *ManageGroupOrChannelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuteChannel not implemented")
}
func (UnimplementedGroupChannelServiceServer) UnmuteChannel(context.Context, *ManageGroupOrChannelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmuteChannel not implemented")
}
func (UnimplementedGroupChannelServiceServer) CreateGroup(context.Context, *CreateGroupRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupChannelServiceServer) GetGroup(context.Context, *wrapperspb.StringValue) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedGroupChannelServiceServer) GetGroups(*wrapperspb.StringValue, GroupChannelService_GetGroupsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (UnimplementedGroupChannelServiceServer) UpdateGroup(context.Context, *Group) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedGroupChannelServiceServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedGroupChannelServiceServer) LeaveGroup(context.Context, *ManageGroupOrChannel) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGroup not implemented")
}
func (UnimplementedGroupChannelServiceServer) InviteToGroup(context.Context, *GroupInviteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteToGroup not implemented")
}
func (UnimplementedGroupChannelServiceServer) GetGroupInvitesForUser(*wrapperspb.StringValue, GroupChannelService_GetGroupInvitesForUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GetGroupInvitesForUser not implemented")
}
func (UnimplementedGroupChannelServiceServer) GetGroupInvitesForGroup(*wrapperspb.StringValue, GroupChannelService_GetGroupInvitesForGroupServer) error {
	return status.Errorf(codes.Unimplemented, "method GetGroupInvitesForGroup not implemented")
}
func (UnimplementedGroupChannelServiceServer) RevokeGroupInvite(context.Context, *RevokeGroupInviteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeGroupInvite not implemented")
}
func (UnimplementedGroupChannelServiceServer) ManageGroupInvite(context.Context, *ManageGroupInviteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageGroupInvite not implemented")
}
func (UnimplementedGroupChannelServiceServer) MuteGroup(context.Context, *ManageGroupOrChannelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuteGroup not implemented")
}
func (UnimplementedGroupChannelServiceServer) UnmuteGroup(context.Context, *ManageGroupOrChannelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmuteGroup not implemented")
}
func (UnimplementedGroupChannelServiceServer) PromoteGroupAdmin(context.Context, *ManageAdminRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteGroupAdmin not implemented")
}
func (UnimplementedGroupChannelServiceServer) DemoteGroupAdmin(context.Context, *ManageAdminRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoteGroupAdmin not implemented")
}
func (UnimplementedGroupChannelServiceServer) BanFromGroup(context.Context, *ManageGroupOrChannelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanFromGroup not implemented")
}
func (UnimplementedGroupChannelServiceServer) UnbanFromGroup(context.Context, *ManageGroupOrChannelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbanFromGroup not implemented")
}
func (UnimplementedGroupChannelServiceServer) mustEmbedUnimplementedGroupChannelServiceServer() {}

// UnsafeGroupChannelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupChannelServiceServer will
// result in compilation errors.
type UnsafeGroupChannelServiceServer interface {
	mustEmbedUnimplementedGroupChannelServiceServer()
}

func RegisterGroupChannelServiceServer(s grpc.ServiceRegistrar, srv GroupChannelServiceServer) {
	s.RegisterService(&GroupChannelService_ServiceDesc, srv)
}

func _GroupChannelService_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChannelServiceServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupChannelService_CreateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChannelServiceServer).CreateChannel(ctx, req.(*CreateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChannelService_GetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChannelServiceServer).GetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupChannelService_GetChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChannelServiceServer).GetChannel(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChannelService_GetChannelsForGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GroupChannelServiceServer).GetChannelsForGroup(m, &groupChannelServiceGetChannelsForGroupServer{stream})
}

type GroupChannelService_GetChannelsForGroupServer interface {
	Send(*ChannelList) error
	grpc.ServerStream
}

type groupChannelServiceGetChannelsForGroupServer struct {
	grpc.ServerStream
}

func (x *groupChannelServiceGetChannelsForGroupServer) Send(m *ChannelList) error {
	return x.ServerStream.SendMsg(m)
}

func _GroupChannelService_UpdateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChannelServiceServer).UpdateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupChannelService_UpdateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChannelServiceServer).UpdateChannel(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChannelService_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChannelServiceServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupChannelService_DeleteChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChannelServiceServer).DeleteChannel(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChannelService_LeaveChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageGroupOrChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChannelServiceServer).LeaveChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupChannelService_LeaveChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChannelServiceServer).LeaveChannel(ctx, req.(*ManageGroupOrChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChannelService_SubscribeToChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChannelServiceServer).SubscribeToChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupChannelService_SubscribeToChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChannelServiceServer).SubscribeToChannel(ctx, req.(*ChannelSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChannelService_UnsubscribeFromChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChannelServiceServer).UnsubscribeFromChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupChannelService_UnsubscribeFromChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChannelServiceServer).UnsubscribeFromChannel(ctx, req.(*ChannelSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChannelService_ManageChannelSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageChannelSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChannelServiceServer).ManageChannelSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupChannelService_ManageChannelSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChannelServiceServer).ManageChannelSubscription(ctx, req.(*ManageChannelSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChannelService_GetChannelSubscriptionsForUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GroupChannelServiceServer).GetChannelSubscriptionsForUser(m, &groupChannelServiceGetChannelSubscriptionsForUserServer{stream})
}

type GroupChannelService_GetChannelSubscriptionsForUserServer interface {
	Send(*ChannelSubscriptionList) error
	grpc.ServerStream
}

type groupChannelServiceGetChannelSubscriptionsForUserServer struct {
	grpc.ServerStream
}

func (x *groupChannelServiceGetChannelSubscriptionsForUserServer) Send(m *ChannelSubscriptionList) error {
	return x.ServerStream.SendMsg(m)
}

func _GroupChannelService_MuteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageGroupOrChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChannelServiceServer).MuteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupChannelService_MuteChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChannelServiceServer).MuteChannel(ctx, req.(*ManageGroupOrChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChannelService_UnmuteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageGroupOrChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChannelServiceServer).UnmuteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupChannelService_UnmuteChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChannelServiceServer).UnmuteChannel(ctx, req.(*ManageGroupOrChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChannelService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChannelServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupChannelService_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChannelServiceServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChannelService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChannelServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupChannelService_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChannelServiceServer).GetGroup(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChannelService_GetGroups_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GroupChannelServiceServer).GetGroups(m, &groupChannelServiceGetGroupsServer{stream})
}

type GroupChannelService_GetGroupsServer interface {
	Send(*GroupList) error
	grpc.ServerStream
}

type groupChannelServiceGetGroupsServer struct {
	grpc.ServerStream
}

func (x *groupChannelServiceGetGroupsServer) Send(m *GroupList) error {
	return x.ServerStream.SendMsg(m)
}

func _GroupChannelService_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChannelServiceServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupChannelService_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChannelServiceServer).UpdateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChannelService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChannelServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupChannelService_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChannelServiceServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChannelService_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageGroupOrChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChannelServiceServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupChannelService_LeaveGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChannelServiceServer).LeaveGroup(ctx, req.(*ManageGroupOrChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChannelService_InviteToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChannelServiceServer).InviteToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupChannelService_InviteToGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChannelServiceServer).InviteToGroup(ctx, req.(*GroupInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChannelService_GetGroupInvitesForUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GroupChannelServiceServer).GetGroupInvitesForUser(m, &groupChannelServiceGetGroupInvitesForUserServer{stream})
}

type GroupChannelService_GetGroupInvitesForUserServer interface {
	Send(*GroupInviteList) error
	grpc.ServerStream
}

type groupChannelServiceGetGroupInvitesForUserServer struct {
	grpc.ServerStream
}

func (x *groupChannelServiceGetGroupInvitesForUserServer) Send(m *GroupInviteList) error {
	return x.ServerStream.SendMsg(m)
}

func _GroupChannelService_GetGroupInvitesForGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GroupChannelServiceServer).GetGroupInvitesForGroup(m, &groupChannelServiceGetGroupInvitesForGroupServer{stream})
}

type GroupChannelService_GetGroupInvitesForGroupServer interface {
	Send(*GroupInviteList) error
	grpc.ServerStream
}

type groupChannelServiceGetGroupInvitesForGroupServer struct {
	grpc.ServerStream
}

func (x *groupChannelServiceGetGroupInvitesForGroupServer) Send(m *GroupInviteList) error {
	return x.ServerStream.SendMsg(m)
}

func _GroupChannelService_RevokeGroupInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeGroupInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChannelServiceServer).RevokeGroupInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupChannelService_RevokeGroupInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChannelServiceServer).RevokeGroupInvite(ctx, req.(*RevokeGroupInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChannelService_ManageGroupInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageGroupInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChannelServiceServer).ManageGroupInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupChannelService_ManageGroupInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChannelServiceServer).ManageGroupInvite(ctx, req.(*ManageGroupInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChannelService_MuteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageGroupOrChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChannelServiceServer).MuteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupChannelService_MuteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChannelServiceServer).MuteGroup(ctx, req.(*ManageGroupOrChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChannelService_UnmuteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageGroupOrChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChannelServiceServer).UnmuteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupChannelService_UnmuteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChannelServiceServer).UnmuteGroup(ctx, req.(*ManageGroupOrChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChannelService_PromoteGroupAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChannelServiceServer).PromoteGroupAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupChannelService_PromoteGroupAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChannelServiceServer).PromoteGroupAdmin(ctx, req.(*ManageAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChannelService_DemoteGroupAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChannelServiceServer).DemoteGroupAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupChannelService_DemoteGroupAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChannelServiceServer).DemoteGroupAdmin(ctx, req.(*ManageAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChannelService_BanFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageGroupOrChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChannelServiceServer).BanFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupChannelService_BanFromGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChannelServiceServer).BanFromGroup(ctx, req.(*ManageGroupOrChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChannelService_UnbanFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageGroupOrChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChannelServiceServer).UnbanFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupChannelService_UnbanFromGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChannelServiceServer).UnbanFromGroup(ctx, req.(*ManageGroupOrChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupChannelService_ServiceDesc is the grpc.ServiceDesc for GroupChannelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupChannelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qreeket.GroupChannelService",
	HandlerType: (*GroupChannelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createChannel",
			Handler:    _GroupChannelService_CreateChannel_Handler,
		},
		{
			MethodName: "getChannel",
			Handler:    _GroupChannelService_GetChannel_Handler,
		},
		{
			MethodName: "updateChannel",
			Handler:    _GroupChannelService_UpdateChannel_Handler,
		},
		{
			MethodName: "deleteChannel",
			Handler:    _GroupChannelService_DeleteChannel_Handler,
		},
		{
			MethodName: "leaveChannel",
			Handler:    _GroupChannelService_LeaveChannel_Handler,
		},
		{
			MethodName: "subscribeToChannel",
			Handler:    _GroupChannelService_SubscribeToChannel_Handler,
		},
		{
			MethodName: "unsubscribeFromChannel",
			Handler:    _GroupChannelService_UnsubscribeFromChannel_Handler,
		},
		{
			MethodName: "manageChannelSubscription",
			Handler:    _GroupChannelService_ManageChannelSubscription_Handler,
		},
		{
			MethodName: "muteChannel",
			Handler:    _GroupChannelService_MuteChannel_Handler,
		},
		{
			MethodName: "unmuteChannel",
			Handler:    _GroupChannelService_UnmuteChannel_Handler,
		},
		{
			MethodName: "createGroup",
			Handler:    _GroupChannelService_CreateGroup_Handler,
		},
		{
			MethodName: "getGroup",
			Handler:    _GroupChannelService_GetGroup_Handler,
		},
		{
			MethodName: "updateGroup",
			Handler:    _GroupChannelService_UpdateGroup_Handler,
		},
		{
			MethodName: "deleteGroup",
			Handler:    _GroupChannelService_DeleteGroup_Handler,
		},
		{
			MethodName: "leaveGroup",
			Handler:    _GroupChannelService_LeaveGroup_Handler,
		},
		{
			MethodName: "inviteToGroup",
			Handler:    _GroupChannelService_InviteToGroup_Handler,
		},
		{
			MethodName: "revokeGroupInvite",
			Handler:    _GroupChannelService_RevokeGroupInvite_Handler,
		},
		{
			MethodName: "manageGroupInvite",
			Handler:    _GroupChannelService_ManageGroupInvite_Handler,
		},
		{
			MethodName: "muteGroup",
			Handler:    _GroupChannelService_MuteGroup_Handler,
		},
		{
			MethodName: "unmuteGroup",
			Handler:    _GroupChannelService_UnmuteGroup_Handler,
		},
		{
			MethodName: "promoteGroupAdmin",
			Handler:    _GroupChannelService_PromoteGroupAdmin_Handler,
		},
		{
			MethodName: "demoteGroupAdmin",
			Handler:    _GroupChannelService_DemoteGroupAdmin_Handler,
		},
		{
			MethodName: "banFromGroup",
			Handler:    _GroupChannelService_BanFromGroup_Handler,
		},
		{
			MethodName: "unbanFromGroup",
			Handler:    _GroupChannelService_UnbanFromGroup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getChannelsForGroup",
			Handler:       _GroupChannelService_GetChannelsForGroup_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getChannelSubscriptionsForUser",
			Handler:       _GroupChannelService_GetChannelSubscriptionsForUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getGroups",
			Handler:       _GroupChannelService_GetGroups_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getGroupInvitesForUser",
			Handler:       _GroupChannelService_GetGroupInvitesForUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getGroupInvitesForGroup",
			Handler:       _GroupChannelService_GetGroupInvitesForGroup_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "group_service.proto",
}
